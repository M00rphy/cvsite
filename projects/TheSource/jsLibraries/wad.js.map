{"version":3,"sources":["webpack://Wad/webpack/universalModuleDefinition","webpack://Wad/webpack/bootstrap","webpack://Wad/./node_modules/tunajs/tuna.js","webpack://Wad/(webpack)/buildin/harmony-module.js","webpack://Wad/./src/audio_listener.js","webpack://Wad/./src/common.js","webpack://Wad/./src/main.js","webpack://Wad/./src/midi.js","webpack://Wad/./src/pitches.js","webpack://Wad/./src/polywad.js","webpack://Wad/./src/presets.js","webpack://Wad/./src/sound_iterator.js","webpack://Wad/./src/wad.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,QAAQ,KAA6B;AACrC;AACA,KAAK,UAAU,IAA4B;AAC3C;AACA,KAAK,MAAM,EAEN;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wDAAwD;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,6DAA6D;AAC7D;AACA,yDAAyD;AACzD;AACA,yDAAyD;AACzD;AACA,yDAAyD;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,uDAAuD;AACvD;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B,WAAW;AAC1C,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,CAAC;;;;;;;;;;;;ACtuED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACM;AACI;;;AAGpC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,E;AACA,OAAO,2BAA2B;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED,mBAAmB,mDAAmD;AACtE,MAAM,2DAA2D;;;AAGjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,qBAAqB,mBAAmB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA,oBAAoB,gBAAgB;AACpC;AACA,2BAA2B,+BAA+B;AAC1D,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,qBAAqB;AAC5B;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,qBAAqB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,+BAA+B;AAC3D,yBAAyB,gDAAO,IAAI,iBAAiB;AACrD,uHAAuH;AACvH;AACA;;AAEA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,mD;AACA,iD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,mBAAmB;AAC1B;;AAEA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA,EAAE,yBAAyB,0DAA0D,EAAE,EAAE;AACzF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,mCAAmC,0BAA0B;;AAE7D,mCAAmC,8BAA8B;;AAEjE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,qBAAqB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gDAAO;AAC3B,sCAAsC,gDAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,kCAAkC;AAClC,sCAAsC,iCAAiC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,EAAE;AACF;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,6CAAI;AACnB;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkCE;;;;;;;;;;;;;AC1oBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACb;AACA;AAIb;AAMH;AACmB;AACC;;;AAGpC,UAAU,+CAAW;AACrB,WAAW,gDAAO;AAClB,mCAAmC,YAAY,uDAAa,YAAY;AACxE,cAAc,gDAAO;AACrB,mBAAmB,qDAAY;AAC/B,cAAc,6CAAO;AACrB,oBAAoB,mDAAa;AACjC,qBAAqB,oDAAc;AACnC,iBAAiB,gDAAU;AAC3B,cAAc,gDAAO;AACrB,WAAW,gDAAQ;;;AAGnB,GAAG,KAA6B,qBAAqB,sBAAsB;;AAE5D,kEAAG,EAAC;;;;;;;;;;;;;;;AChCnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB;;AAEuB;;AAEzC;AACA;AACA;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA,6CAA6C,WAAW;AACxD,EAAE;AACF;AACA;AACA,oBAAoB,CAAC,0DAAU,iBAAiB,GAAG;AACnD,oBAAoB,CAAC,0DAAU,kBAAkB;AACjD;;AAEA;;AAEA;AACA,CAAC,0DAAU;AACX,+BAA+B;AAC/B,8BAA8B;AAC9B,GAAG,0DAAU;AACb,GAAG,0DAAU,CAAC,qDAAY;AAC1B,uBAAuB,qDAAY;AACnC;AACA;AACA,GAAG,0DAAU;AACb,GAAG,0DAAU,CAAC,qDAAY;AAC1B,wBAAwB,QAAQ,qDAAY,4BAA4B,qDAAY,oBAAoB;AACxG;AACA;AACA,oCAAoC;AACpC,EAAE,0DAAU;AACZ;AACA,gCAAgC,gCAAgC;AAChE,mCAAmC,iCAAiC;AACpE;AACA;AACA,oCAAoC;AACpC,EAAE,0DAAU;AACZ;AACA;;;AAGA;;AAEA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA,sDAAsD;AACtD,CAAC,0DAAU;AACX,CAAC,0DAAU;AACX,8BAA8B;AAC9B,iBAAiB,uBAAuB;AACxC,wCAAwC;AACxC;AACA,2BAA2B;AAC3B,mCAAmC;AACnC,oEAAoE;AACpE;AACA;AACA,CAAC,0DAAU;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAU;AACZ;AACA;;AAOE;;;;;;;;;;;;;;;;;;ACrzQF;AAAA;AAAA;AAckB;AAIC;;;AAGnB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,qBAAqB;AACrB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;;AAEZ,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,uBAAuB;AACtD;;AAEA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;;AAEA;AACA,EAAE,+DAAe,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA,0BAA0B,+CAAO;AACjC;AACA;AACA,6CAA6C,+CAAO,aAAa;AACjE;AACA,0BAA0B,+CAAO;AACjC;AACA,0BAA0B,+CAAO;AACjC;AACA;;AAEA;AACA,qCAAqC,+CAAO;AAC5C;AACA;;AAEA,CAAC,+DAAe;AAChB,qBAAqB,CAAC,6DAAa,YAAY;;AAE/C,qBAAqB,CAAC,iEAAiB,YAAY;;AAEnD,+BAA+B,+CAAO;;AAEtC,CAAC,gEAAgB;AACjB,CAAC,kEAAkB;AACnB,wBAAwB,CAAC,mEAAmB,YAAY;;AAExD,CAAC,8DAAc;AACf,CAAC,gEAAgB;AACjB,CAAC,+DAAe;AAChB;AACA;AACA,CAAC,wDAAQ;AACT;AACA,sBAAsB,oBAAoB;AAC1C;;AAEA;AACA;AACA,8BAA8B,+CAAO;;AAErC;AACA;AACA;AACA;AACA,kBAAkB,qDAAY;AAC9B;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,uDAAuD,oBAAoB,EAAE;AAC7E;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAU;AACZ;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB,gDAAO;AACvB;AACA,sCAAsC,gDAAO;AAC7C;AACA,eAAe,gDAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,2BAA2B;AAC3B;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAU;AACZ;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAU;AACZ;AACA;AACA;;;;AAIA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA,+BAA+B,+CAAO;AACtC;AACA;AACA;AACA,wBAAwB,+CAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEe,sEAAO,EAAC;;;;;;;;;;;;;AC9TvB;AAAA;AACA;AACA;AACA,cAAc,gEAAgE;AAC9E,iBAAiB;AACjB,KAAK;AACL;AACA;AACA,cAAc,+DAA+D;AAC7E,iBAAiB;AACjB,KAAK;AACL;AACA;AACA,cAAc,gEAAgE;AAC9E,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA,cAAc,8DAA8D;AAC5E,iBAAiB,6CAA6C,6BAA6B;AAC3F,kBAAkB;AAClB,KAAK;AACL;AACA;AACA;AACA,cAAc,+DAA+D;AAC7E,iBAAiB,gDAAgD;AACjE;AACA;;AAEe,sEAAO,EAAC;;;;;;;;;;;;;AC/BvB;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,yCAAyC,kDAAkD;AAC3F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,MAAM;AAChE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACa;;AAEb,mCAAmC,mFAAmF,wCAAwC,EAAE,OAAO,8BAA8B,EAAE;;AAEvM,iDAAiD,2CAA2C,0DAA0D,EAAE;;AAExJ,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE;;AAE3T,6DAA6D,sEAAsE,8DAA8D,oBAAoB;;AAErN,2CAA2C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY;;AAE/M;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;;AAEjB,yBAAyB;AACzB;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG,EAAE;;AAEL,0CAA0C;;AAE1C;AACA;AACA,iBAAiB;;AAEjB,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACc,4EAAa,EAAC;;;;;;;;;;;;;AClN7B;AAAA;AAAA;AAAA;AAAA;AAA0B;AACmB;AA8B3B;;AAElB;AACA;AACA;AACA,yCAAyC,+CAAO,aAAa;AAC7D,sBAAsB,8DAAc,gBAAgB;AACpD;AACA,wBAAwB;AACxB;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,CAAC,4DAAY;AACb,CAAC,+DAAe;AAChB,CAAC,gEAAgB;AACjB,CAAC,gEAAgB;AACjB,CAAC,+DAAe;AAChB,+BAA+B,+CAAO;AACtC,CAAC,gEAAgB;AACjB,CAAC,8DAAc;AACf;AACA;;;AAGA;AACA;AACA,uBAAuB,mDAAW;AAClC;AACA;;;AAGA;AACA;AACA,EAAE,0DAAU;AACZ;AACA;;;AAGA;AACA,8BAA8B,2DAA2D;AACzF,EAAE,gEAAgB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,oCAAoC;AAC3C;AACA;AACA;AACA,mBAAmB,+CAAO;AAC1B,mBAAmB,uDAAa,CAAC,+CAAO;AACxC,YAAY,6CAAI;AAChB,gBAAgB,6CAAI;AACpB;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,OAAO,0DAAkB;AACzB;AACA,IAAI,wDAAQ;AACZ;AACA;AACA,IAAI,+DAAe;AACnB,IAAI,gEAAgB;AACpB,IAAI,gEAAgB;AACpB,IAAI,+DAAe;AACnB,kCAAkC,+CAAO;AACzC,IAAI,gEAAgB;AACpB,IAAI,8DAAc;AAClB,IAAI,wDAAQ;AACZ,IAAI,wDAAQ;AACZ;AACA;AACA,Q;AACA,GAAG,0DAAU;AACb,GAAG,0DAAU;AACb;AACA,IAAI;AACJ;AACA;;AAEA,OAAO;AACP;AACA,oBAAoB,cAAc;AAClC,qBAAqB,0BAA0B;AAC/C,QAAQ,kCAAkC;AAC1C;;;AAGA,uBAAuB,2DAA2D;AAClF,GAAG,+DAAe;AAClB;;AAEA;AACA,sBAAsB,+CAAO;AAC7B;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,+CAAO;AAC1B;AACA;;AAEA;;;AAGA;AACA;AACA,EAAE,8DAAc;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,iEAAiB;AACnB;AACA,EAAE,+DAAe;;AAEjB,kCAAkC,+CAAO;;;AAGzC,oBAAoB,+CAAO,eAAe;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sBAAsB,CAAC,iEAAiB,YAAY;;AAEpD;AACA,EAAE,kEAAkB;AACpB;;;AAGA,EAAE,gEAAgB;;AAElB,EAAE,wDAAQ;;AAEV,4CAA4C,CAAC,yDAAS,YAAY;AAClE,EAAE,uDAAO;;AAET;AACA,uBAAuB,CAAC,kEAAkB,iBAAiB;;AAE3D;AACA,uBAAuB,CAAC,kEAAkB,iBAAiB;;AAE3D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,sBAAsB,oBAAoB;;AAE1C;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,8CAA8C,+CAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0CAA0C,+CAAO,cAAc;AAC9F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,EAAE,0DAAU;AACZ;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA,4EAA4E,+CAAO;AACnF;AACA;AACA,uDAAuD,+CAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA,4DAA4D,+CAAO;AACnE;AACA;AACA;AACA;AACA,kDAAkD,+CAAO;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,+CAAO;AAC7C;AACA;;AAEA;AACA,MAAM,uDAAO;AACb;;AAEA;AACA;AACA,iDAAiD,+CAAO;AACxD;;AAEA,MAAM,uDAAO,aAAa,0BAA0B;AACpD,0CAA0C,8BAA8B;AACxE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,EAAE,0DAAU;AACZ;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,0DAAU;AACZ;;AAEA;AACA;;;AAGA;AACA,kBAAkB,+CAAO;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,O;AACA,EAAE,0DAAU;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG,0DAAU;AACb,GAAG,0DAAU;AACb,UAAU;AACV;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA,6CAA6C,+CAAO;AACpD,+DAA+D,+CAAO;AACtE,sDAAsD,+CAAO;;;AAG7D;AACA;AACA;AACA;AACA,2CAA2C,+CAAO;AAClD,6DAA6D,+CAAO;AACpE,oDAAoD,+CAAO;AAC3D;AACA,0BAA0B,+CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0DAAU;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,0DAAkB;AAC5B;AACA;AACA,OAAO,CAAC,0DAAU;AAClB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;;AAEe,kEAAG,EAAC","file":"wad.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Wad\"] = factory();\n\telse\n\t\troot[\"Wad\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","/*\r\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\r\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\r\n    is furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\r\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n/*global module*/\r\n(function() {\r\n\r\n    var userContext,\r\n        userInstance,\r\n        pipe = function(param, val) {\r\n            param.value = val;\r\n        },\r\n        Super = Object.create(null, {\r\n            activate: {\r\n                writable: true,\r\n                value: function(doActivate) {\r\n                    if (doActivate) {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.activateNode);\r\n                        if (this.activateCallback) {\r\n                            this.activateCallback(doActivate);\r\n                        }\r\n                    } else {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.output);\r\n                    }\r\n                }\r\n            },\r\n            bypass: {\r\n                get: function() {\r\n                    return this._bypass;\r\n                },\r\n                set: function(value) {\r\n                    if (this._lastBypassValue === value) {\r\n                        return;\r\n                    }\r\n                    this._bypass = value;\r\n                    this.activate(!value);\r\n                    this._lastBypassValue = value;\r\n                }\r\n            },\r\n            connect: {\r\n                value: function(target) {\r\n                    this.output.connect(target);\r\n                }\r\n            },\r\n            disconnect: {\r\n                value: function(target) {\r\n                    this.output.disconnect(target);\r\n                }\r\n            },\r\n            connectInOrder: {\r\n                value: function(nodeArray) {\r\n                    var i = nodeArray.length - 1;\r\n                    while (i--) {\r\n                        if (!nodeArray[i].connect) {\r\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\r\n                        }\r\n                        if (nodeArray[i + 1].input) {\r\n                            nodeArray[i].connect(nodeArray[i + 1].input);\r\n                        } else {\r\n                            nodeArray[i].connect(nodeArray[i + 1]);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            getDefaults: {\r\n                value: function() {\r\n                    var result = {};\r\n                    for (var key in this.defaults) {\r\n                        result[key] = this.defaults[key].value;\r\n                    }\r\n                    return result;\r\n                }\r\n            },\r\n            automate: {\r\n                value: function(property, value, duration, startTime) {\r\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\r\n                        dur = duration ? ~~(duration / 1000) : 0,\r\n                        _is = this.defaults[property],\r\n                        param = this[property],\r\n                        method;\r\n\r\n                    if (param) {\r\n                        if (_is.automatable) {\r\n                            if (!duration) {\r\n                                method = \"setValueAtTime\";\r\n                            } else {\r\n                                method = \"linearRampToValueAtTime\";\r\n                                param.cancelScheduledValues(start);\r\n                                param.setValueAtTime(param.value, start);\r\n                            }\r\n                            param[method](value, dur + start);\r\n                        } else {\r\n                            param = value;\r\n                        }\r\n                    } else {\r\n                        console.error(\"Invalid Property for \" + this.name);\r\n                    }\r\n                }\r\n            }\r\n        }),\r\n        FLOAT = \"float\",\r\n        BOOLEAN = \"boolean\",\r\n        STRING = \"string\",\r\n        INT = \"int\";\r\n\r\n    if (typeof module !== \"undefined\" && module.exports) {\r\n        module.exports = Tuna;\r\n    } else if (typeof define === \"function\") {\r\n        window.define(\"Tuna\", definition);\r\n    } else {\r\n        window.Tuna = Tuna;\r\n    }\r\n\r\n    function definition() {\r\n        return Tuna;\r\n    }\r\n\r\n    function Tuna(context) {\r\n        if (!(this instanceof Tuna)) {\r\n            return new Tuna(context);\r\n        }\r\n\r\n        var _window = typeof window === \"undefined\" ? {} : window;\r\n\r\n        if (!_window.AudioContext) {\r\n            _window.AudioContext = _window.webkitAudioContext;\r\n        }\r\n        if (!context) {\r\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\r\n            context = _window.AudioContext && (new _window.AudioContext());\r\n        }\r\n        if (!context) {\r\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\r\n        }\r\n        connectify(context);\r\n        userContext = context;\r\n        userInstance = this;\r\n    }\r\n\r\n    function connectify(context) {\r\n        if (context.__connectified__ === true) return;\r\n\r\n        var gain = context.createGain(),\r\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\r\n            oconnect = proto.connect;\r\n\r\n        proto.connect = shimConnect;\r\n        context.__connectified__ = true; // Prevent overriding connect more than once\r\n\r\n        function shimConnect() {\r\n            var node = arguments[0];\r\n            arguments[0] = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\r\n            oconnect.apply(this, arguments);\r\n            return node;\r\n        }\r\n    }\r\n\r\n    function dbToWAVolume(db) {\r\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\r\n    }\r\n\r\n    function fmod(x, y) {\r\n        // http://kevin.vanzonneveld.net\r\n        // *     example 1: fmod(5.7, 1.3);\r\n        // *     returns 1: 0.5\r\n        var tmp, tmp2, p = 0,\r\n            pY = 0,\r\n            l = 0.0,\r\n            l2 = 0.0;\r\n\r\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n\r\n        if (pY > p) {\r\n            p = pY;\r\n        }\r\n\r\n        tmp2 = (x % y);\r\n\r\n        if (p < -100 || p > 20) {\r\n            // toFixed will give an out of bound error so we fix it like this:\r\n            l = Math.round(Math.log(tmp2) / Math.log(10));\r\n            l2 = Math.pow(10, l);\r\n\r\n            return (tmp2 / l2).toFixed(l - p) * l2;\r\n        } else {\r\n            return parseFloat(tmp2.toFixed(-p));\r\n        }\r\n    }\r\n\r\n    function sign(x) {\r\n        if (x === 0) {\r\n            return 1;\r\n        } else {\r\n            return Math.abs(x) / x;\r\n        }\r\n    }\r\n\r\n    function tanh(n) {\r\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\r\n    }\r\n\r\n    function initValue(userVal, defaultVal) {\r\n        return userVal === undefined ? defaultVal : userVal;\r\n    }\r\n\r\n    Tuna.prototype.Bitcrusher = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var phaser = 0,\r\n            last = 0,\r\n            input, output, step, i, length;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0),\r\n            output = e.outputBuffer.getChannelData(0),\r\n            step = Math.pow(1 / 2, this.bits);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                phaser += this.normfreq;\r\n                if (phaser >= 1.0) {\r\n                    phaser -= 1.0;\r\n                    last = step * Math.floor(input[i] / step + 0.5);\r\n                }\r\n                output[i] = last;\r\n            }\r\n        };\r\n\r\n        this.bits = properties.bits || this.defaults.bits.value;\r\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Bitcrusher\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bits: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 16,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                normfreq: {\r\n                    value: 0.1,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        bits: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.bits;\r\n            },\r\n            set: function(value) {\r\n                this.processor.bits = value;\r\n            }\r\n        },\r\n        normfreq: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.normfreq;\r\n            },\r\n            set: function(value) {\r\n                this.processor.normfreq = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Cabinet = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = this.newConvolver(properties.impulsePath || \"../impulses/impulse_guitar.wav\");\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.convolver.input);\r\n        this.convolver.output.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n        //don't use makeupGain setter at init to avoid smoothing\r\n        this.makeupNode.gain.value = initValue(properties.makeupGain, this.defaults.makeupGain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Cabinet\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        newConvolver: {\r\n            value: function(impulsePath) {\r\n                return new userInstance.Convolver({\r\n                    impulse: impulsePath,\r\n                    dryLevel: 0,\r\n                    wetLevel: 1\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Chorus = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.attenuator = this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.delayL = userContext.createDelay();\r\n        this.delayR = userContext.createDelay();\r\n        this.feedbackGainNodeLR = userContext.createGain();\r\n        this.feedbackGainNodeRL = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.output = userContext.createGain();\r\n\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.delayL.delayTime,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.delayR.delayTime,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.attenuator);\r\n        this.attenuator.connect(this.output);\r\n        this.attenuator.connect(this.splitter);\r\n        this.splitter.connect(this.delayL, 0);\r\n        this.splitter.connect(this.delayR, 1);\r\n        this.delayL.connect(this.feedbackGainNodeLR);\r\n        this.delayR.connect(this.feedbackGainNodeRL);\r\n        this.feedbackGainNodeLR.connect(this.delayR);\r\n        this.feedbackGainNodeRL.connect(this.delayL);\r\n        this.delayL.connect(this.merger, 0, 0);\r\n        this.delayR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.lfoR.phase = Math.PI / 2;\r\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Chorus\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                feedback: {\r\n                    value: 0.4,\r\n                    min: 0,\r\n                    max: 0.95,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                delay: {\r\n                    value: 0.0045,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 1.5,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delay: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delay;\r\n            },\r\n            set: function(value) {\r\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\r\n                this.lfoL.offset = this._delay;\r\n                this.lfoR.offset = this._delay;\r\n                this._depth = this._depth;\r\n            }\r\n        },\r\n        depth: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._depth * this._delay;\r\n                this.lfoR.oscillation = this._depth * this._delay;\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeLR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n                this.feedbackGainNodeRL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Compressor = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.compNode.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n\r\n        this.automakeup = initValue(properties.automakeup, this.defaults.automakeup.value);\r\n\r\n        //don't use makeupGain setter at initialization to avoid smoothing\r\n        if (this.automakeup) {\r\n            this.makeupNode.gain.value = dbToWAVolume(this.computeMakeup());\r\n        } else {\r\n            this.makeupNode.gain.value = dbToWAVolume(initValue(properties.makeupGain, this.defaults.makeupGain.value));\r\n        }\r\n        this.threshold = initValue(properties.threshold, this.defaults.threshold.value);\r\n        this.release = initValue(properties.release, this.defaults.release.value);\r\n        this.attack = initValue(properties.attack, this.defaults.attack.value);\r\n        this.ratio = properties.ratio || this.defaults.ratio.value;\r\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Compressor\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                threshold: {\r\n                    value: -20,\r\n                    min: -60,\r\n                    max: 0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                release: {\r\n                    value: 250,\r\n                    min: 10,\r\n                    max: 2000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                attack: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                ratio: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 50,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                knee: {\r\n                    value: 5,\r\n                    min: 0,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                automakeup: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        computeMakeup: {\r\n            value: function() {\r\n                var magicCoefficient = 4, // raise me if the output is too hot\r\n                    c = this.compNode;\r\n                return -(c.threshold.value - c.threshold.value / c.ratio.value) / magicCoefficient;\r\n            }\r\n        },\r\n        automakeup: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._automakeup;\r\n            },\r\n            set: function(value) {\r\n                this._automakeup = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        threshold: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.threshold;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.threshold.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        ratio: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.ratio;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.ratio.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        knee: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.knee;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.knee.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        attack: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.attack;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.attack.value = value / 1000;\r\n            }\r\n        },\r\n        release: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.release;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.release.value = value / 1000;\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.setTargetAtTime(dbToWAVolume(value), userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Convolver = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = userContext.createConvolver();\r\n        this.dry = userContext.createGain();\r\n        this.filterLow = userContext.createBiquadFilter();\r\n        this.filterHigh = userContext.createBiquadFilter();\r\n        this.wet = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filterLow);\r\n        this.activateNode.connect(this.dry);\r\n        this.filterLow.connect(this.filterHigh);\r\n        this.filterHigh.connect(this.convolver);\r\n        this.convolver.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        //don't use setters at init to avoid smoothing\r\n        this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.filterHigh.frequency.value = properties.highCut || this.defaults.highCut.value;\r\n        this.filterLow.frequency.value = properties.lowCut || this.defaults.lowCut.value;\r\n        this.output.gain.value = initValue(properties.level, this.defaults.level.value);\r\n        this.filterHigh.type = \"lowpass\";\r\n        this.filterLow.type = \"highpass\";\r\n        this.buffer = properties.impulse || \"../impulses/ir_rev_short.wav\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Convolver\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                highCut: {\r\n                    value: 22050,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                lowCut: {\r\n                    value: 20,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                level: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        lowCut: {\r\n            get: function() {\r\n                return this.filterLow.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterLow.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        highCut: {\r\n            get: function() {\r\n                return this.filterHigh.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterHigh.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        level: {\r\n            get: function() {\r\n                return this.output.gain;\r\n            },\r\n            set: function(value) {\r\n                this.output.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        dryLevel: {\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        wetLevel: {\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        buffer: {\r\n            enumerable: false,\r\n            get: function() {\r\n                return this.convolver.buffer;\r\n            },\r\n            set: function(impulse) {\r\n                var convolver = this.convolver,\r\n                    xhr = new XMLHttpRequest();\r\n                if (!impulse) {\r\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\r\n                    return;\r\n                }\r\n                xhr.open(\"GET\", impulse, true);\r\n                xhr.responseType = \"arraybuffer\";\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\r\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\r\n                                convolver.buffer = buffer;\r\n                            }, function(e) {\r\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                xhr.send(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Delay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.dry = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.delay = userContext.createDelay(10);\r\n        this.feedbackNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.delay);\r\n        this.activateNode.connect(this.dry);\r\n        this.delay.connect(this.filter);\r\n        this.filter.connect(this.feedbackNode);\r\n        this.feedbackNode.connect(this.delay);\r\n        this.feedbackNode.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\r\n        //don't use setters at init to avoid smoothing\r\n        this.feedbackNode.gain.value = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.wet.gain.value = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.dry.gain.value = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.filter.frequency.value = properties.cutoff || this.defaults.cutoff.value;\r\n        this.filter.type = \"lowpass\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Delay\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTime: {\r\n                    value: 100,\r\n                    min: 20,\r\n                    max: 1000,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.45,\r\n                    min: 0,\r\n                    max: 0.9,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                cutoff: {\r\n                    value: 20000,\r\n                    min: 20,\r\n                    max: 20000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delayTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.delay.delayTime;\r\n            },\r\n            set: function(value) {\r\n                this.delay.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        dryLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.feedbackNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.feedbackNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Filter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filter);\r\n        this.filter.connect(this.output);\r\n\r\n        //don't use setters for freq and gain at init to avoid smoothing\r\n        this.filter.frequency.value = properties.frequency || this.defaults.frequency.value;\r\n        this.Q = properties.resonance || this.defaults.Q.value;\r\n        this.filterType = initValue(properties.filterType, this.defaults.filterType.value);\r\n        this.filter.gain.value = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Filter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                frequency: {\r\n                    value: 800,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                Q: {\r\n                    value: 1,\r\n                    min: 0.001,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                gain: {\r\n                    value: 0,\r\n                    min: -40,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                filterType: {\r\n                    value: \"lowpass\",\r\n                    automatable: false,\r\n                    type: STRING\r\n                }\r\n            }\r\n        },\r\n        filterType: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.type;\r\n            },\r\n            set: function(value) {\r\n                this.filter.type = value;\r\n            }\r\n        },\r\n        Q: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.Q;\r\n            },\r\n            set: function(value) {\r\n                this.filter.Q.value = value;\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.gain;\r\n            },\r\n            set: function(value) {\r\n                this.filter.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        frequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Gain = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.gainNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.gainNode);\r\n        this.gainNode.connect(this.output);\r\n\r\n        //don't use setter at init to avoid smoothing\r\n        this.gainNode.gain.value = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Gain.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Gain\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                gain: {\r\n                    value: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.gainNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.gainNode.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.MoogFilter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var in1, in2, in3, in4, out1, out2, out3, out4;\r\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\r\n        var input, output, f, fb, i, length, inputFactor;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0);\r\n            output = e.outputBuffer.getChannelData(0);\r\n            f = this.cutoff * 1.16;\r\n            inputFactor = 0.35013 * (f * f) * (f * f);\r\n            fb = this.resonance * (1.0 - 0.15 * f * f);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                input[i] -= out4 * fb;\r\n                input[i] *= inputFactor;\r\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\r\n                in1 = input[i];\r\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\r\n                in2 = out1;\r\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\r\n                in3 = out2;\r\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\r\n                in4 = out3;\r\n                output[i] = out4;\r\n            }\r\n        };\r\n\r\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff.value);\r\n        this.resonance = initValue(properties.resonance, this.defaults.resonance.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"MoogFilter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                cutoff: {\r\n                    value: 0.065,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 3.5,\r\n                    min: 0.0,\r\n                    max: 4.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.cutoff;\r\n            },\r\n            set: function(value) {\r\n                this.processor.cutoff = value;\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.resonance;\r\n            },\r\n            set: function(value) {\r\n                this.processor.resonance = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Overdrive = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.inputDrive = userContext.createGain();\r\n        this.waveshaper = userContext.createWaveShaper();\r\n        this.outputDrive = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.inputDrive);\r\n        this.inputDrive.connect(this.waveshaper);\r\n        this.waveshaper.connect(this.outputDrive);\r\n        this.outputDrive.connect(this.output);\r\n\r\n        this.ws_table = new Float32Array(this.k_nSamples);\r\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\r\n        this.outputGain = initValue(properties.outputGain, this.defaults.outputGain.value);\r\n        this.curveAmount = initValue(properties.curveAmount, this.defaults.curveAmount.value);\r\n        this.algorithmIndex = initValue(properties.algorithmIndex, this.defaults.algorithmIndex.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Overdrive\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                drive: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                outputGain: {\r\n                    value: 0,\r\n                    min: -46,\r\n                    max: 0,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                curveAmount: {\r\n                    value: 0.725,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                algorithmIndex: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 5,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        k_nSamples: {\r\n            value: 8192\r\n        },\r\n        drive: {\r\n            get: function() {\r\n                return this.inputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._drive = value;\r\n            }\r\n        },\r\n        curveAmount: {\r\n            get: function() {\r\n                return this._curveAmount;\r\n            },\r\n            set: function(value) {\r\n                this._curveAmount = value;\r\n                if (this._algorithmIndex === undefined) {\r\n                    this._algorithmIndex = 0;\r\n                }\r\n                this.waveshaperAlgorithms[this._algorithmIndex](this._curveAmount, this.k_nSamples, this.ws_table);\r\n                this.waveshaper.curve = this.ws_table;\r\n            }\r\n        },\r\n        outputGain: {\r\n            get: function() {\r\n                return this.outputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._outputGain = dbToWAVolume(value);\r\n                this.outputDrive.gain.setValueAtTime(this._outputGain, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        algorithmIndex: {\r\n            get: function() {\r\n                return this._algorithmIndex;\r\n            },\r\n            set: function(value) {\r\n                this._algorithmIndex = value;\r\n                this.curveAmount = this._curveAmount;\r\n            }\r\n        },\r\n        waveshaperAlgorithms: {\r\n            value: [\r\n                function(amount, n_samples, ws_table) {\r\n                    amount = Math.min(amount, 0.9999);\r\n                    var k = 2 * amount / (1 - amount),\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\r\n                        ws_table[i] = tanh(y);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, a = 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\r\n                        ws_table[i] = tanh(y * 2);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        abx = Math.abs(x);\r\n                        if (abx < a) y = abx;\r\n                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\r\n                        else if (abx > 1) y = abx;\r\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\r\n                    var i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        if (x < -0.08905) {\r\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) - 0.032847)) + 0.01;\r\n                        } else if (x >= -0.08905 && x < 0.320018) {\r\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\r\n                        } else {\r\n                            ws_table[i] = 0.630035;\r\n                        }\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var a = 2 + Math.round(amount * 14),\r\n                        // we go from 2 to 16 bits, keep in mind for the UI\r\n                        bits = Math.round(Math.pow(2, a - 1)),\r\n                        // real number of quantization steps divided by 2\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = Math.round(x * bits) / bits;\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Panner = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.panner = userContext.createStereoPanner();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.panner);\r\n        this.panner.connect(this.output);\r\n\r\n        this.pan = initValue(properties.pan, this.defaults.pan.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Panner.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Panner\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                pan: {\r\n                    value: 0.0,\r\n                    min: -1.0,\r\n                    max: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        pan: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.panner.pan;\r\n            },\r\n            set: function(value) {\r\n                this.panner.pan.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Phaser = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\r\n        this.filtersL = [];\r\n        this.filtersR = [];\r\n        this.feedbackGainNodeL = userContext.createGain();\r\n        this.feedbackGainNodeR = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.filteredSignal = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.filtersL,\r\n            callback: this.callback\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.filtersR,\r\n            callback: this.callback\r\n        });\r\n\r\n        var i = this.stage;\r\n        while (i--) {\r\n            this.filtersL[i] = userContext.createBiquadFilter();\r\n            this.filtersR[i] = userContext.createBiquadFilter();\r\n            this.filtersL[i].type = \"allpass\";\r\n            this.filtersR[i].type = \"allpass\";\r\n        }\r\n        this.input.connect(this.splitter);\r\n        this.input.connect(this.output);\r\n        this.splitter.connect(this.filtersL[0], 0, 0);\r\n        this.splitter.connect(this.filtersR[0], 1, 0);\r\n        this.connectInOrder(this.filtersL);\r\n        this.connectInOrder(this.filtersR);\r\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\r\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\r\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\r\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\r\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\r\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Phaser\"\r\n        },\r\n        stage: {\r\n            value: 4\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                rate: {\r\n                    value: 0.1,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.6,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 40,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                baseModulationFrequency: {\r\n                    value: 700,\r\n                    min: 500,\r\n                    max: 1500,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(filters, value) {\r\n                for (var stage = 0; stage < 4; stage++) {\r\n                    filters[stage].frequency.value = value;\r\n                }\r\n            }\r\n        },\r\n        depth: {\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\r\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\r\n            }\r\n        },\r\n        rate: {\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        baseModulationFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseModulationFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseModulationFrequency = value;\r\n                this.lfoL.offset = this._baseModulationFrequency;\r\n                this.lfoR.offset = this._baseModulationFrequency;\r\n                this.depth = this._depth;\r\n            }\r\n        },\r\n        feedback: {\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeL.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n                this.feedbackGainNodeR.gain.setTargetAtTime(this._feedback, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR._phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.PingPongDelay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.stereoToMonoMix = userContext.createGain();\r\n        this.feedbackLevel = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.delayLeft = userContext.createDelay(10);\r\n        this.delayRight = userContext.createDelay(10);\r\n\r\n        this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.merger = userContext.createChannelMerger(2);\r\n\r\n        this.activateNode.connect(this.splitter);\r\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\r\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\r\n        this.stereoToMonoMix.gain.value = .5;\r\n        this.stereoToMonoMix.connect(this.wet);\r\n        this.wet.connect(this.delayLeft);\r\n        this.feedbackLevel.connect(this.wet);\r\n        this.delayLeft.connect(this.delayRight);\r\n        this.delayRight.connect(this.feedbackLevel);\r\n        this.delayLeft.connect(this.merger, 0, 0);\r\n        this.delayRight.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n        this.activateNode.connect(this.output);\r\n\r\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\r\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\r\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\r\n        this.wet.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"PingPongDelay\"\r\n        },\r\n        delayTimeLeft: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeLeft;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeLeft = value;\r\n                this.delayLeft.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        delayTimeRight: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeRight;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeRight = value;\r\n                this.delayRight.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.wet.gain;\r\n            },\r\n            set: function (value) {\r\n                this.wet.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        }, \r\n        feedback: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.feedbackLevel.gain;\r\n            },\r\n            set: function (value) {\r\n                this.feedbackLevel.gain.setTargetAtTime(value, userContext.currentTime, 0.01);\r\n            }\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTimeLeft: {\r\n                    value: 200,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                delayTimeRight: {\r\n                    value: 400,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                feedback: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Tremolo = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\r\n        this.amplitudeL = userContext.createGain();\r\n        this.amplitudeR = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.amplitudeL.gain,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.amplitudeR.gain,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.splitter);\r\n        this.splitter.connect(this.amplitudeL, 0);\r\n        this.splitter.connect(this.amplitudeR, 1);\r\n        this.amplitudeL.connect(this.merger, 0, 0);\r\n        this.amplitudeR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = properties.rate || this.defaults.rate.value;\r\n        this.intensity = initValue(properties.intensity, this.defaults.intensity.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.offset = 1 - (this.intensity / 2);\r\n        this.lfoR.offset = 1 - (this.intensity / 2);\r\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Tremolo\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                intensity: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 5,\r\n                    min: 0.1,\r\n                    max: 11,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        intensity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._intensity;\r\n            },\r\n            set: function(value) {\r\n                this._intensity = value;\r\n                this.lfoL.offset = 1 - this._intensity / 2;\r\n                this.lfoR.offset = 1 - this._intensity / 2;\r\n                this.lfoL.oscillation = this._intensity;\r\n                this.lfoR.oscillation = this._intensity;\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR.phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.WahWah = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\r\n            target: this,\r\n            callback: function(context, value) {\r\n                context.sweep = value;\r\n            }\r\n        });\r\n        this.filterBp = userContext.createBiquadFilter();\r\n        this.filterPeaking = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        //Connect AudioNodes\r\n        this.activateNode.connect(this.filterBp);\r\n        this.filterBp.connect(this.filterPeaking);\r\n        this.filterPeaking.connect(this.output);\r\n\r\n        //Set Properties\r\n        this.init();\r\n        this.automode = initValue(properties.automode, this.defaults.automode.value);\r\n        this.resonance = properties.resonance || this.defaults.resonance.value;\r\n        this.sensitivity = initValue(properties.sensitivity, this.defaults.sensitivity.value);\r\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults.baseFrequency.value);\r\n        this.excursionOctaves = properties.excursionOctaves || this.defaults.excursionOctaves.value;\r\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\r\n\r\n        this.activateNode.gain.value = 2;\r\n        this.envelopeFollower.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"WahWah\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                automode: {\r\n                    value: true,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                baseFrequency: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                excursionOctaves: {\r\n                    value: 2,\r\n                    min: 1,\r\n                    max: 6,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sweep: {\r\n                    value: 0.2,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 10,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sensitivity: {\r\n                    value: 0.5,\r\n                    min: -1,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        automode: {\r\n            get: function() {\r\n                return this._automode;\r\n            },\r\n            set: function(value) {\r\n                this._automode = value;\r\n                if (value) {\r\n                    this.activateNode.connect(this.envelopeFollower.input);\r\n                    this.envelopeFollower.activate(true);\r\n                } else {\r\n                    this.envelopeFollower.activate(false);\r\n                    this.activateNode.disconnect();\r\n                    this.activateNode.connect(this.filterBp);\r\n                }\r\n            }\r\n        },\r\n        filterFreqTimeout: {\r\n            value: 0\r\n        },\r\n        setFilterFreq: {\r\n            value: function() {\r\n                try {\r\n                    this.filterBp.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                    this.filterPeaking.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                } catch (e) {\r\n                    clearTimeout(this.filterFreqTimeout);\r\n                    //put on the next cycle to let all init properties be set\r\n                    this.filterFreqTimeout = setTimeout(function() {\r\n                        this.setFilterFreq();\r\n                    }.bind(this), 0);\r\n                }\r\n            }\r\n        },\r\n        sweep: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sweep;\r\n            },\r\n            set: function(value) {\r\n                this._sweep = Math.pow(value > 1 ? 1 : value < 0 ? 0 : value, this._sensitivity);\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        baseFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseFrequency = 50 * Math.pow(10, value * 2);\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        excursionOctaves: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._excursionOctaves;\r\n            },\r\n            set: function(value) {\r\n                this._excursionOctaves = value;\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        sensitivity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sensitivity;\r\n            },\r\n            set: function(value) {\r\n                this._sensitivity = Math.pow(10, value);\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._resonance;\r\n            },\r\n            set: function(value) {\r\n                this._resonance = value;\r\n                this.filterPeaking.Q = this._resonance;\r\n            }\r\n        },\r\n        init: {\r\n            value: function() {\r\n                this.output.gain.value = 1;\r\n                this.filterPeaking.type = \"peaking\";\r\n                this.filterBp.type = \"bandpass\";\r\n                this.filterPeaking.frequency.value = 100;\r\n                this.filterPeaking.gain.value = 20;\r\n                this.filterPeaking.Q.value = 5;\r\n                this.filterBp.frequency.value = 100;\r\n                this.filterBp.Q.value = 1;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.EnvelopeFollower = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.jsNode = this.output = userContext.createScriptProcessor(this.buffersize, 1, 1);\r\n\r\n        this.input.connect(this.output);\r\n\r\n        this.attackTime = initValue(properties.attackTime, this.defaults.attackTime.value);\r\n        this.releaseTime = initValue(properties.releaseTime, this.defaults.releaseTime.value);\r\n        this._envelope = 0;\r\n        this.target = properties.target || {};\r\n        this.callback = properties.callback || function() {};\r\n\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"EnvelopeFollower\"\r\n        },\r\n        defaults: {\r\n            value: {\r\n                attackTime: {\r\n                    value: 0.003,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                releaseTime: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        buffersize: {\r\n            value: 256\r\n        },\r\n        envelope: {\r\n            value: 0\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        attackTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._attackTime;\r\n            },\r\n            set: function(value) {\r\n                this._attackTime = value;\r\n                this._attackC = Math.exp(-1 / this._attackTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        releaseTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._releaseTime;\r\n            },\r\n            set: function(value) {\r\n                this._releaseTime = value;\r\n                this._releaseC = Math.exp(-1 / this._releaseTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        callback: {\r\n            get: function() {\r\n                return this._callback;\r\n            },\r\n            set: function(value) {\r\n                if (typeof value === \"function\") {\r\n                    this._callback = value;\r\n                } else {\r\n                    console.error(\"tuna.js: \" + this.name + \": Callback must be a function!\");\r\n                }\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                this.activated = doActivate;\r\n                if (doActivate) {\r\n                    this.jsNode.connect(userContext.destination);\r\n                    this.jsNode.onaudioprocess = this.returnCompute(this);\r\n                } else {\r\n                    this.jsNode.disconnect();\r\n                    this.jsNode.onaudioprocess = null;\r\n                }\r\n                if (this.activateCallback) {\r\n                    this.activateCallback(doActivate);\r\n                }\r\n            }\r\n        },\r\n        returnCompute: {\r\n            value: function(instance) {\r\n                return function(event) {\r\n                    instance.compute(event);\r\n                };\r\n            }\r\n        },\r\n        compute: {\r\n            value: function(event) {\r\n                var count = event.inputBuffer.getChannelData(0).length,\r\n                    channels = event.inputBuffer.numberOfChannels,\r\n                    current, chan, rms, i;\r\n                chan = rms = i = 0;\r\n                if (channels > 1) { //need to mixdown\r\n                    for (i = 0; i < count; ++i) {\r\n                        for (; chan < channels; ++chan) {\r\n                            current = event.inputBuffer.getChannelData(chan)[i];\r\n                            rms += (current * current) / channels;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (i = 0; i < count; ++i) {\r\n                        current = event.inputBuffer.getChannelData(0)[i];\r\n                        rms += (current * current);\r\n                    }\r\n                }\r\n                rms = Math.sqrt(rms);\r\n\r\n                if (this._envelope < rms) {\r\n                    this._envelope *= this._attackC;\r\n                    this._envelope += (1 - this._attackC) * rms;\r\n                } else {\r\n                    this._envelope *= this._releaseC;\r\n                    this._envelope += (1 - this._releaseC) * rms;\r\n                }\r\n                this._callback(this._target, this._envelope);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.LFO = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        //Instantiate AudioNode\r\n        this.input = userContext.createGain();\r\n        this.output = userContext.createScriptProcessor(256, 1, 1);\r\n        this.activateNode = userContext.destination;\r\n\r\n        //Set Properties\r\n        this.frequency = initValue(properties.frequency, this.defaults.frequency.value);\r\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\r\n        this.oscillation = initValue(properties.oscillation, this.defaults.oscillation.value);\r\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\r\n        this.target = properties.target || {};\r\n        this.output.onaudioprocess = this.callback(properties.callback || function() {});\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"LFO\"\r\n        },\r\n        bufferSize: {\r\n            value: 256\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        defaults: {\r\n            value: {\r\n                frequency: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                offset: {\r\n                    value: 0.85,\r\n                    min: 0,\r\n                    max: 22049,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                oscillation: {\r\n                    value: 0.3,\r\n                    min: -22050,\r\n                    max: 22050,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                phase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 2 * Math.PI,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        frequency: {\r\n            get: function() {\r\n                return this._frequency;\r\n            },\r\n            set: function(value) {\r\n                this._frequency = value;\r\n                this._phaseInc = 2 * Math.PI * this._frequency * this.bufferSize / this.sampleRate;\r\n            }\r\n        },\r\n        offset: {\r\n            get: function() {\r\n                return this._offset;\r\n            },\r\n            set: function(value) {\r\n                this._offset = value;\r\n            }\r\n        },\r\n        oscillation: {\r\n            get: function() {\r\n                return this._oscillation;\r\n            },\r\n            set: function(value) {\r\n                this._oscillation = value;\r\n            }\r\n        },\r\n        phase: {\r\n            get: function() {\r\n                return this._phase;\r\n            },\r\n            set: function(value) {\r\n                this._phase = value;\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                if (doActivate) {\r\n                    this.output.connect(userContext.destination);\r\n                    if (this.activateCallback) {\r\n                        this.activateCallback(doActivate);\r\n                    }\r\n                } else {\r\n                    this.output.disconnect();\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(callback) {\r\n                var that = this;\r\n                return function() {\r\n                    that._phase += that._phaseInc;\r\n                    if (that._phase > 2 * Math.PI) {\r\n                        that._phase = 0;\r\n                    }\r\n                    callback(that._target, that._offset + that._oscillation * Math.sin(that._phase));\r\n                };\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.toString = Tuna.prototype.toString = function() {\r\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\r\n    };\r\n})();\r\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/*This module wraps the audio listener to create a uniform interface between browsers, mainly Safari and other browsers:\nhttps://developer.mozilla.org/en-US/docs/Web/API/AudioListener\n*/\n\nclass AudioParam{\n\t// this is a wrapper for Safari if the browser does not support listener.positionX or the other properties\n\tconstructor(value, setFunc){\n\t\tthis._setFunc = setFunc;\n\t\tthis.AudioParamautomationRate = 'a-rate';\n\t\tthis.defaultValue = value;\n\t\tthis.maxValue = 3.4028234663852886e+38;\n\t\tthis.minValue = -3.4028234663852886e+38;\n\t\tthis._value = this.defaultValue;\n\t}\n\n\tget value(){\n\t\treturn this._value;\n\t}\n\n\tset value(v){\n\t\tthis._setFunc(v);\n\t\tthis._value = v;\n\t}\n}\n\nexport default class AudioListener{\n\tconstructor(context){\n\t\tthis._listener = context.listener;\n\t\twindow.listener = this._listener;\n\t\tthis.positionX = this._listener.positionX || new AudioParam(0, v=>this._listener.setPosition(v, this.positionY.value, this.positionZ.value));\n\t\tthis.positionY = this._listener.positionY || new AudioParam(0, v=>this._listener.setPosition(this.positionX.value, v, this.positionZ.value));\n\t\tthis.positionZ = this._listener.positionZ || new AudioParam(0, v=>this._listener.setPosition(this.positionX.value, this.positionY.value, v));\n\t\tthis.forwardX = this._listener.forwardX || new AudioParam(0, v=>this._listener.setOrientation(v, this.forwardY.value, this.forwardZ.value, this.upX.value, this.upY.value, this.upZ.value));\n\t\tthis.forwardY = this._listener.ForwardY || new AudioParam(0, v=>this._listener.setOrientation(this.forwardX.value, v, this.forwardZ.value, this.upX.value, this.upY.value, this.upZ.value));\n\t\tthis.forwardZ = this._listener.forwardZ || new AudioParam(-1, v=>this._listener.setOrientation(this.forwardX.value, this.forwardY.value, v, this.upX.value, this.upY.value, this.upZ.value));\n\t\tthis.upX = this._listener.upZ || new AudioParam(0, v=>this._listener.setOrientation(this.forwardX.value, this.forwardY.value, this.forwardZ.value, v, this.upY.value, this.upZ.value));\n\t\tthis.upY = this._listener.upY || new AudioParam(1, v=>this._listener.setOrientation(this.forwardX.value, this.forwardY.value, this.forwardZ.value, this.upX.value, v, this.upZ.value));\n\t\tthis.upZ = this._listener.upZ || new AudioParam(0, v=>this._listener.setOrientation(this.forwardX.value, this.forwardY.value, this.forwardZ.value, this.upX.value, this.upY.value, v));\n\t}\n\n\tsetPosition(x, y, z){\n\t\tthis.positionX.value = x;\n\t\tthis.positionY.value = y;\n\t\tthis.positionZ.value = z;\n\t}\n\n\tgetPosition(){\n\t\treturn [this.positionX.value, this.positionY.value, this.positionZ.value];\n\t}\n\n\tsetOrientation(forwardX, forwardY, forwardZ, upX, upY, upZ){\n\t\tthis.forwardX.value = forwardX;\n\t\tthis.forwardY.value = forwardY;\n\t\tthis.forwardZ.value = forwardZ;\n\t\tthis.upX.value = upX;\n\t\tthis.upY.value = upY;\n\t\tthis.upZ.value = upZ;\n\t}\n\n\tgetOrientation(){\n\t\treturn [this.forwardX.value, this.forwardY.value, this.forwardZ.value, this.upX.value, this.upY.value, this.upZ.value];\n\t}\n}","import Tuna from 'tunajs';\nimport Polywad from './polywad';\nimport { pitches } from './pitches';\n\n\nlet audioContext = window.AudioContext || window.webkitAudioContext;\n\nlet logStuff = {\n\tverbosity: 0,\n\tsuppressedLogs: 0\n};\n\nlet logMessage = function(message, logLevel){\n\tlogLevel = logLevel || 1;\n\tif ( logStuff.verbosity >= logLevel ) {\n\t\tconsole.log(message);\n\t} \n\telse { logStuff.suppressedLogs++; }\n};\n    \nlet aScene = document.querySelector('a-scene');\nlet context;\nif ( aScene && aScene.audioListener && aScene.audioListener.context){\n\tcontext = aScene.audioListener.context;\n\tlogMessage('An A-Frame scene has been detected.');\n}\nelse {\n\tcontext = new audioContext();\n}\n\nlet unlock = function(){\n\tlogMessage('unlock', 2);\n\tif ( context.state === 'suspended' ) {\n\t\tlogMessage('suspended', 2);\n\t\tcontext.resume();\n\t}\n\telse if ( context.state === 'running' ) {\n\t\tlogMessage('The audio context is running.', 2);\n\t\tlogMessage(context, 2);\n\t\twindow.removeEventListener('mousemove', unlock);\n\t\twindow.removeEventListener('touchstart', unlock);\n\t\twindow.removeEventListener('touchend', unlock);\n\t}\n};\nwindow.addEventListener('mousemove', unlock);\nwindow.addEventListener('touchstart', unlock);\nwindow.addEventListener('touchend', unlock);\n// create a wrapper for old versions of `getUserMedia`\nlet getUserMedia = (function(window) {\n\tif (window.navigator.mediaDevices && window.navigator.mediaDevices.getUserMedia) {\n\t\t// Browser supports promise based `getUserMedia`\n\t\treturn window.navigator.mediaDevices.getUserMedia.bind(window.navigator.mediaDevices);\n\t}\n\tlet navigatorGetUserMedia = window.navigator.getUserMedia || window.navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;\n\tif (navigatorGetUserMedia) {\n\t\t// Browser supports old `getUserMedia` with callbacks.\n\t\treturn function(constraints) {\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tnavigatorGetUserMedia.call(window.navigator, constraints, resolve, reject);\n\t\t\t});\n\t\t};\n\t}\n    \n\treturn function() {\n\t\tthrow 'getUserMedia is unsupported';\n\t};\n}(window));\n    \nif (getUserMedia) { logMessage('Your browser supports getUserMedia.'); }\nelse { logMessage('Your browser does not support getUserMedia.'); }\n\n\n/** Pre-render a noise buffer instead of generating noise on the fly. **/\nlet noiseBuffer = (function(){\n\t// the initial seed\n\tMath.seed = 6;\n\tMath.seededRandom = function(max, min){\n\t\tmax = max || 1;\n\t\tmin = min || 0;\n\t\tMath.seed = ( Math.seed * 9301 + 49297 ) % 233280;\n\t\tvar rnd = Math.seed / 233280;\n\n\t\treturn min + rnd * (max - min);\n\t};\n\tvar bufferSize = 2 * context.sampleRate;\n\tvar noiseBuffer = context.createBuffer(1, bufferSize, context.sampleRate);\n\tvar output = noiseBuffer.getChannelData(0);\n\tfor ( var i = 0; i < bufferSize; i++ ) {\n\t\toutput[i] = Math.seededRandom() * 2 - 1;\n\t}\n\treturn noiseBuffer;\n})();\n\n\n/** a lil hack. just be glad it isn't on Object.prototype. **/\nlet isArray = function(object){\n\treturn Object.prototype.toString.call(object) === '[object Array]';\n};\nlet valueOrDefault = function(value, def) {\n\tvar val = (value == null) ? def : value;\n\treturn val;\n};\n\n/** Set up the default ADSR envelope. **/\nlet constructEnv = function(that, arg){\n\tthat.env = { //default envelope, if one is not specified on play\n\t\tattack  : arg.env ? valueOrDefault(arg.env.attack,  0) : 0,    // time in seconds from onset to peak volume\n\t\tdecay   : arg.env ? valueOrDefault(arg.env.decay,   0) : 0,    // time in seconds from peak volume to sustain volume\n\t\tsustain : arg.env ? valueOrDefault(arg.env.sustain, 1) : 1,    // sustain volume level, as a percent of peak volume. min:0, max:1\n\t\thold    : arg.env ? valueOrDefault(arg.env.hold, 3.14159) : 3.14159, // time in seconds to maintain sustain volume\n\t\trelease : arg.env ? valueOrDefault(arg.env.release, 0) : 0     // time in seconds from sustain volume to zero volume\n\t};\n\tthat.defaultEnv = {\n\t\tattack  : arg.env ? valueOrDefault(arg.env.attack,  0) : 0,    // time in seconds from onset to peak volume\n\t\tdecay   : arg.env ? valueOrDefault(arg.env.decay,   0) : 0,    // time in seconds from peak volume to sustain volume\n\t\tsustain : arg.env ? valueOrDefault(arg.env.sustain, 1) : 1,    // sustain volume level, as a percent of peak volume. min:0, max:1\n\t\thold    : arg.env ? valueOrDefault(arg.env.hold, 3.14159) : 3.14159, // time in seconds to maintain sustain volume\n\t\trelease : arg.env ? valueOrDefault(arg.env.release, 0) : 0     // time in seconds from sustain volume to zero volume\n\t};\n\tthat.userSetHold = !!(arg.env && arg.env.hold);\n};\n/////////////////////////////////////////\n\n\n/** Set up the default filter and filter envelope. **/\nlet constructFilter = function(that, arg){\n\n\tif ( !arg.filter ) { arg.filter = null; }\n\n\telse if ( isArray(arg.filter) ) {\n\t\tthat.filter = arg.filter.map(function(filterArg){\n\t\t\treturn {\n\t\t\t\ttype : filterArg.type || 'lowpass',\n\t\t\t\tfrequency : filterArg.frequency || 600,\n\t\t\t\tq : filterArg.q || 1,\n\t\t\t\tenv : filterArg.env || null,\n\t\t\t};\n\t\t});\n\t}\n\telse {\n\t\tthat.filter  = [{\n\t\t\ttype : arg.filter.type || 'lowpass',\n\t\t\tfrequency : arg.filter.frequency || 600,\n\t\t\tq : arg.filter.q || 1,\n\t\t\tenv : arg.filter.env ||null,\n\t\t}];\n\t}\n};\n//////////////////////////////////////////////////////\n\n\n/** If the Wad uses an audio file as the source, request it from the server.\nDon't let the Wad play until all necessary files have been downloaded. **/\nlet requestAudioFile = function(that, callback){\n\tvar request = new XMLHttpRequest();\n\trequest.open('GET', that.source, true);\n\trequest.responseType = 'arraybuffer';\n\tthat.playable--;\n\trequest.onload = function(){\n\t\tcontext.decodeAudioData(request.response, function (decodedBuffer){\n\t\t\tthat.decodedBuffer = decodedBuffer;\n\t\t\tif ( that.env.hold === 3.14159 ) { // audio buffers should not use the default hold\n\t\t\t\tthat.defaultEnv.hold = that.decodedBuffer.duration * ( 1 / that.rate );\n\t\t\t\tthat.env.hold = that.decodedBuffer.duration * ( 1 / that.rate );\n\t\t\t}\n\t\t\tthat.duration = that.env.hold * 1000;\n\n\t\t\tif ( callback ) { callback(that); }\n\t\t\tthat.playable++;\n\t\t\tif ( that.playOnLoad ) { that.play(that.playOnLoadArg); }\n\t\t});\n\t};\n\trequest.send();\n};\n//////////////////////////////////////////////////////////////////////////\n\n/** Set up the vibrato LFO **/\nlet constructVibrato = function(that, arg){\n\tif ( arg.vibrato ) {\n\t\tthat.vibrato = {\n\t\t\tshape     : valueOrDefault(arg.vibrato.shape, 'sine'),\n\t\t\tspeed     : valueOrDefault(arg.vibrato.speed, 1),\n\t\t\tmagnitude : valueOrDefault(arg.vibrato.magnitude, 5),\n\t\t\tattack    : valueOrDefault(arg.vibrato.attack, 0)\n\t\t};\n\t}\n\telse { that.vibrato = null; }\n};\n//////////////////////////////\n\n\n/** Set up the tremolo LFO **/\nlet constructTremolo = function(that, arg){\n\tif ( arg.tremolo ) {\n\t\tthat.tremolo = {\n\t\t\tshape     : valueOrDefault(arg.tremolo.shape, 'sine'),\n\t\t\tspeed     : valueOrDefault(arg.tremolo.speed, 1),\n\t\t\tmagnitude : valueOrDefault(arg.tremolo.magnitude, 5),\n\t\t\tattack    : valueOrDefault(arg.tremolo.attack, 1)\n\t\t};\n\t}\n\telse { that.tremolo = null; }\n};\n//////////////////////////////\n\n/** Grab the reverb impulse response file from a server.\nYou may want to change Wad.defaultImpulse to serve files from your own server.\nCheck out http://www.voxengo.com/impulses/ for free impulse responses. **/\nlet defaultImpulse = 'https://frivolous.biz/audio/widehall.wav';\n\nlet constructReverb = function(that, arg){\n\tif ( arg.reverb ) {\n\t\tthat.reverb = { wet : valueOrDefault(arg.reverb.wet, 1) };\n\t\tvar impulseURL = arg.reverb.impulse || defaultImpulse;\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.open('GET', impulseURL, true);\n\t\trequest.responseType = 'arraybuffer';\n\t\tthat.playable--;\n\t\trequest.onload = function(){\n\t\t\tcontext.decodeAudioData(request.response, function (decodedBuffer){\n\n\t\t\t\tthat.reverb.buffer = decodedBuffer;\n\t\t\t\tthat.playable++;\n\t\t\t\tif ( that.playOnLoad ) { that.play(that.playOnLoadArg); }\n\t\t\t\tif ( that instanceof Polywad ) { that.setUp(arg); }\n\t\t\t\tif ( that.source === 'mic' && that.reverb && that.reverb.buffer && that.reverb.node && !that.reverb.node.buffer ) { // I think this is only relevant when calling play() with args on a mic\n\t\t\t\t\tthat.reverb.node.convolver.buffer = that.reverb.buffer;\n\t\t\t\t}\n\n\t\t\t});\n\t\t};\n\t\trequest.send();\n\t}\n\telse {\n\t\tthat.reverb = null;\n\t}\n};\n\nlet constructPanning = function(that, arg){\n\tif ( 'panning' in arg ) {\n\t\tthat.panning = { location : arg.panning };\n\t\tif ( typeof(arg.panning) === 'number' ) {\n\t\t\tthat.panning.type = 'stereo';\n\t\t}\n\n\t\telse {\n\t\t\tthat.panning.type = '3d';\n\t\t\tthat.panning.panningModel   = arg.panningModel || 'equalpower';\n\t\t\tthat.panning.distanceModel  = arg.distanceModel; \n\t\t\tthat.panning.maxDistance    = arg.maxDistance; \n\t\t\tthat.panning.rolloffFactor  = arg.rolloffFactor;\n\t\t\tthat.panning.refDistance    = arg.refDistance;\n\t\t\tthat.panning.coneInnerAngle = arg.coneInnerAngle;\n\t\t\tthat.panning.coneOuterAngle = arg.coneOuterAngle;\n\t\t\tthat.panning.coneOuterGain  = arg.coneOuterGain;\n\t\t}\n\t}\n\n\telse {\n\t\tthat.panning = {\n\t\t\tlocation : 0,\n\t\t\ttype     : 'stereo',\n\t\t};\n\t}\n\tif ( that.panning.type === 'stereo' && !context.createStereoPanner ) {\n\t\tlogMessage('Your browser does not support stereo panning. Falling back to 3D panning.');\n\t\tthat.panning = {\n\t\t\tlocation     : [0,0,0],\n\t\t\ttype         : '3d',\n\t\t\tpanningModel : 'equalpower',\n\t\t};\n\t}\n};\n//////////////////////////////////////////////////////////////////////////////\nlet constructDelay = function(that, arg){\n\tif ( arg.delay ) {\n\t\tthat.delay = {\n\t\t\tdelayTime    : valueOrDefault(arg.delay.delayTime, .5),\n\t\t\tmaxDelayTime : valueOrDefault(arg.delay.maxDelayTime, 2),\n\t\t\tfeedback     : valueOrDefault(arg.delay.feedback, .25),\n\t\t\twet          : valueOrDefault(arg.delay.wet, .25)\n\t\t};\n\t}\n\telse { that.delay = null; }\n};\n\nlet permissionsGranted = { micConsent: false };\n/** Special initialization and configuration for microphone Wads **/\nlet getConsent = function(that, arg) {\n\tthat.nodes             = [];\n\tthat.mediaStreamSource = null;\n\tthat.gain              = null;\n\treturn getUserMedia({audio: true, video: false}).then(function(stream) {\n\t\tthat.mediaStreamSource = context.createMediaStreamSource(stream);\n\t\tpermissionsGranted.micConsent = true;\n\t\tsetUpMic(that, arg);\n\t\treturn that;\n\t}).catch(function(error) { logMessage('Error setting up microphone input: ', error); }); // This is the error callback.\n};\n////////////////////////////////////////////////////////////////////\n\nlet setUpMic = function(that, arg){\n\tthat.nodes           = [];\n\tthat.gain            = context.createGain();\n\tthat.gain.gain.value = valueOrDefault(arg.volume,that.volume);\n\tthat.nodes.push(that.mediaStreamSource);\n\tthat.nodes.push(that.gain);\n  \n\n\tif ( that.filter || arg.filter ) { createFilters(that, arg); }\n\n\tif ( that.reverb || arg.reverb ) { setUpReverbOnPlay(that, arg); }\n\n\tconstructPanning(that, arg);\n\tsetUpPanningOnPlay(that, arg);\n\n\tif ( that.delay || arg.delay ) {\n\t\tsetUpDelayOnPlay(that, arg);\n\t}\n\tsetUpTunaOnPlay(that, arg);\n\tthat.setUpExternalFxOnPlay(arg, context);\n};\n\n\n/** When a note is played, these two functions will schedule changes in volume and filter frequency,\nas specified by the volume envelope and filter envelope **/\nlet filterEnv = function(wad, arg){\n\twad.filter.forEach(function (filter, index){\n\t\tfilter.node.frequency.linearRampToValueAtTime(filter.frequency, arg.exactTime);\n\t\tfilter.node.frequency.linearRampToValueAtTime(filter.env.frequency, arg.exactTime + filter.env.attack);\n\t});\n};\n\nlet playEnv = function(wad, arg){\n\tlet loop = arg.loop || arg.loop;\n\tlet hold;\n\tif ( wad.env.hold === -1 || (loop && !wad.userSetHold && !(arg.env && arg.env.hold) ) ){\n\t\thold = 999;\n\t}\n\telse { hold = wad.env.hold; }\n\twad.gain[0].gain.linearRampToValueAtTime(0.0001, arg.exactTime);\n\twad.gain[0].gain.linearRampToValueAtTime(wad.volume, arg.exactTime + wad.env.attack + 0.00001);\n\twad.gain[0].gain.linearRampToValueAtTime(wad.volume * wad.env.sustain, arg.exactTime + wad.env.attack + wad.env.decay + 0.00002);\n\twad.gain[0].gain.linearRampToValueAtTime(wad.volume * wad.env.sustain, arg.exactTime + wad.env.attack + wad.env.decay + hold + 0.00003);\n\twad.gain[0].gain.linearRampToValueAtTime(0.0001, arg.exactTime + wad.env.attack + wad.env.decay + hold + wad.env.release + 0.00004);\n\t// offset is only used by BufferSourceNodes. OscillatorNodes should safely ignore the offset.\n\twad.soundSource.start(arg.exactTime, arg.offset);\n\tif ( !wad.soundSource.playbackRate ) { // audio clips naturally stop themselves at the end of the buffer's duration\n\t\twad.soundSource.stop(arg.exactTime + wad.env.attack + wad.env.decay + hold + wad.env.release + 0.00005);\n\t}\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/** When all the nodes are set up for this Wad, this function plugs them into each other,\nwith special handling for nodes with custom interfaces (e.g. reverb, delay). **/\nlet plugEmIn = function(that, arg){\n\tlet destination = ( arg && arg.destination ) || that.destination;\n\tlet lastStop;\n\tfor ( let i = 1; i < that.nodes.length; i++ ) {\n\t\tlet from;\n\t\tlet to;\n\t\tif ( that.nodes[i-1].interface === 'custom' ) {\n\t\t\tfrom = that.nodes[i-1].output;\n\t\t}\n\t\telse { // assume native interface\n\t\t\tfrom = that.nodes[i-1];\n\t\t}\n\t\tif ( that.nodes[i].interface === 'custom' ) {\n\t\t\tto = that.nodes[i].input;\n\t\t}\n\t\telse { // assume native interface\n\t\t\tto = that.nodes[i];\n\t\t}\n\t\tfrom.connect(to);\n\t}\n\tif ( that.nodes[that.nodes.length-1].interface === 'custom') {\n\t\tlastStop = that.nodes[that.nodes.length-1].output;\n\t}\n\telse { // assume native interface\n\t\tlastStop = that.nodes[that.nodes.length-1];\n\t}\n\tlastStop.connect(destination);\n\n};\n\n\n/** Initialize and configure an oscillator node **/\nlet setUpOscillator = function(that, arg){\n\targ = arg || {};\n\tthat.soundSource = context.createOscillator();\n\tthat.soundSource.type = that.source;\n\tif ( arg.pitch ) {\n\t\tif ( arg.pitch in pitches ) {\n\t\t\tthat.soundSource.frequency.value = pitches[arg.pitch];\n\t\t}\n\t\telse {\n\t\t\tthat.soundSource.frequency.value = arg.pitch;\n\t\t}\n\t}\n\telse {\n\t\tthat.soundSource.frequency.value = that.pitch;\n\t}\n};\n///////////////////////////////////////////////////\n\n/** Set the ADSR volume envelope according to play() arguments, or revert to defaults **/\nlet setUpEnvOnPlay = function(that, arg){\n\tif ( arg && arg.env ) {\n\t\tthat.env.attack  = valueOrDefault(arg.env.attack, that.defaultEnv.attack);\n\t\tthat.env.decay   = valueOrDefault(arg.env.decay, that.defaultEnv.decay);\n\t\tthat.env.sustain = valueOrDefault(arg.env.sustain, that.defaultEnv.sustain);\n\t\tthat.env.hold    = valueOrDefault(arg.env.hold, that.defaultEnv.hold);\n\t\tthat.env.release = valueOrDefault(arg.env.release, that.defaultEnv.release);\n\t}\n\telse {\n\t\tthat.env = {\n\t\t\tattack  : that.defaultEnv.attack,\n\t\t\tdecay   : that.defaultEnv.decay,\n\t\t\tsustain : that.defaultEnv.sustain,\n\t\t\thold    : that.defaultEnv.hold,\n\t\t\trelease : that.defaultEnv.release\n\t\t};\n\t}\n\n};\n//////////////////////////////////////////////////////////////////////////////////\n\n\n/** Set the filter and filter envelope according to play() arguments, or revert to defaults **/\n\nlet createFilters = function(that, arg){\n\tif ( arg.filter && !isArray(arg.filter) ) {\n\t\targ.filter = [arg.filter];\n\t}\n\tthat.filter.forEach(function (filter, i) {\n\t\tfilter.node                 = context.createBiquadFilter();\n\t\tfilter.node.type            = filter.type;\n\t\tfilter.node.frequency.value = ( arg.filter && arg.filter[i] ) ? ( arg.filter[i].frequency || filter.frequency ) : filter.frequency;\n\t\tfilter.node.Q.value         = ( arg.filter && arg.filter[i] ) ? ( arg.filter[i].q         || filter.q )         : filter.q;\n\t\tif ( ( arg.filter && arg.filter[i].env || that.filter[i].env ) && !( that.source === 'mic' ) ) {\n\t\t\tfilter.env = {\n\t\t\t\tattack    : ( arg.filter && arg.filter[i].env && arg.filter[i].env.attack )    || that.filter[i].env.attack,\n\t\t\t\tfrequency : ( arg.filter && arg.filter[i].env && arg.filter[i].env.frequency ) || that.filter[i].env.frequency\n\t\t\t};\n\t\t}\n\n\t\tthat.nodes.push(filter.node);\n\t});\n};\n\nlet setUpFilterOnPlay = function(that, arg){\n\tif ( arg && arg.filter && that.filter ) {\n\t\tif ( !isArray(arg.filter) ) arg.filter = [arg.filter];\n\t\tcreateFilters(that, arg);\n\t}\n\telse if ( that.filter ) {\n\t\tcreateFilters(that, that);\n\t}\n};\n///////////////////////////////////////////////////////////////////////////////////////////////\n\n/** Initialize and configure a convolver node for playback **/\nlet setUpReverbOnPlay = function(that, arg){\n\tvar reverbNode = {\n\t\tinterface : 'custom',\n\t\tinput : context.createGain(),\n\t\tconvolver : context.createConvolver(),\n\t\twet : context.createGain(),\n\t\toutput : context.createGain()\n\t};\n\treverbNode.convolver.buffer = that.reverb.buffer;\n\treverbNode.wet.gain.value   = that.reverb.wet;\n\n\treverbNode.input.connect(reverbNode.convolver);\n\treverbNode.input.connect(reverbNode.output);\n\treverbNode.convolver.connect(reverbNode.wet);\n\treverbNode.wet.connect(reverbNode.output);\n\n\tthat.reverb.node = reverbNode;\n\tthat.nodes.push(that.reverb.node);\n};\n//////////////////////////////////////////////////////////////\n\n\n/** Initialize and configure a panner node for playback **/\nlet setUpPanningOnPlay = function(that, arg){\n\tvar panning = arg && arg.panning; // can be zero provided as argument\n\tif (typeof panning === 'undefined') { panning = that.panning.location; }\n\n\tif (typeof panning  === 'number' && context.createStereoPanner ) {\n\t\tthat.panning.node = context.createStereoPanner();\n\t\tthat.panning.node.pan.value = panning;\n\t\tthat.panning.type = 'stereo';\n\t}\n\telse {\n\t\tthat.panning.node = context.createPanner();\n\t\tif ( typeof panning === 'number' ) {\n\t\t\tthat.panning.node.setPosition(panning, 0, 0);\n\t\t}\n\t\telse { // assume 3d panning, specified in a 3-element array. \n\t\t\tthat.panning.node.setPosition(panning[0], panning[1], panning[2]);\n\t\t}\n\t\tthat.panning.node.panningModel = arg.panningModel || that.panningModel || 'equalpower';\n\t\tthat.panning.type = '3d';\n\n\t\tthat.panning.node.distanceModel  = arg.distanceModel  || that.distanceModel  || that.panning.node.distanceModel;\n\t\tthat.panning.node.maxDistance    = arg.maxDistance    || that.maxDistance    || that.panning.node.maxDistance;\n\t\tthat.panning.node.rolloffFactor  = arg.rolloffFactor  || that.rolloffFactor  || that.panning.node.rolloffFactor;\n\t\tthat.panning.node.refDistance    = arg.refDistance    || that.refDistance    || that.panning.node.refDistance;\n\t\tthat.panning.node.coneInnerAngle = arg.coneInnerAngle || that.coneInnerAngle || that.panning.node.coneInnerAngle;\n\t\tthat.panning.node.coneOuterAngle = arg.coneOuterAngle || that.coneOuterAngle || that.panning.node.coneOuterAngle;\n\t\tthat.panning.node.coneOuterGain  = arg.coneOuterGain  || that.coneOuterGain  || that.panning.node.coneOuterGain;\n\t}\n\n\tthat.nodes.push(that.panning.node);\n\n};\n\n\n/** Initialize and configure a vibrato LFO Wad for playback **/\nlet setUpVibratoOnPlay = function(that, arg, Wad){\n\tthat.vibrato.wad = new Wad({\n\t\tsource : that.vibrato.shape,\n\t\tpitch  : that.vibrato.speed,\n\t\tvolume : that.vibrato.magnitude,\n\t\tenv    : {\n\t\t\tattack : that.vibrato.attack\n\t\t},\n\t\tdestination : that.soundSource.frequency\n\t});\n\tthat.vibrato.wad.play();\n};\n\n\n/** Initialize and configure a tremolo LFO Wad for playback **/\nlet setUpTremoloOnPlay = function(that, arg, Wad){\n\tthat.tremolo.wad = new Wad({\n\t\tsource : that.tremolo.shape,\n\t\tpitch  : that.tremolo.speed,\n\t\tvolume : that.tremolo.magnitude,\n\t\tenv    : {\n\t\t\tattack : that.tremolo.attack,\n\t\t\thold   : 10\n\t\t},\n\t\tdestination : that.gain[0].gain\n\t});\n\tthat.tremolo.wad.play();\n};\n///////////////////////////////////////////////////////////////\n\nlet setUpDelayOnPlay = function(that, arg){\n\tif ( that.delay ) {\n\t\tif ( !arg.delay ) { arg.delay = {}; }\n\t\t//create the nodes we’ll use\n\t\tvar delayNode = { // the custom delay node\n\t\t\tinterface    : 'custom',\n\t\t\tinput        : context.createGain(),\n\t\t\toutput       : context.createGain(),\n\t\t\tdelayNode    : context.createDelay(that.delay.maxDelayTime), // the native delay node inside the custom delay node.\n\t\t\tfeedbackNode : context.createGain(),\n\t\t\twetNode      : context.createGain(),\n\t\t};\n\n\t\t//set some decent values\n\t\tdelayNode.delayNode.delayTime.value = valueOrDefault(arg.delay.delayTime, that.delay.delayTime);\n\t\tdelayNode.feedbackNode.gain.value   = valueOrDefault(arg.delay.feedback, that.delay.feedback);\n\t\tdelayNode.wetNode.gain.value        = valueOrDefault(arg.delay.wet, that.delay.wet);\n\n\n\t\t//set up the routing\n\t\tdelayNode.input.connect(delayNode.delayNode);\n\t\tdelayNode.input.connect(delayNode.output);\n\t\tdelayNode.delayNode.connect(delayNode.feedbackNode);\n\t\tdelayNode.delayNode.connect(delayNode.wetNode);\n\t\tdelayNode.feedbackNode.connect(delayNode.delayNode);\n\t\tdelayNode.wetNode.connect(delayNode.output);\n\t\tthat.delay.delayNode = delayNode;\n\n\t\tthat.nodes.push(delayNode);\n\t}\n};\n\n/** **/\nlet constructCompressor = function(that, arg){\n\tthat.compressor = context.createDynamicsCompressor();\n\tthat.compressor.attack.value    = valueOrDefault(arg.compressor.attack, that.compressor.attack.value);\n\tthat.compressor.knee.value      = valueOrDefault(arg.compressor.knee, that.compressor.knee.value);\n\tthat.compressor.ratio.value     = valueOrDefault(arg.compressor.ratio, that.compressor.ratio.value);\n\tthat.compressor.release.value   = valueOrDefault(arg.compressor.release, that.compressor.release.value);\n\tthat.compressor.threshold.value = valueOrDefault(arg.compressor.threshold, that.compressor.threshold.value);\n\tthat.nodes.push(that.compressor);\n};\n\nlet tuna = new Tuna(context);\nlet setUpTunaOnPlay = function(that, arg){\n\tif ( !( that.tuna || arg.tuna ) ) { return; }\n\tlet tunaConfig = {};\n\tif ( that.tuna ) {\n\t\tfor ( let key in that.tuna ) {\n\t\t\ttunaConfig[key] = that.tuna[key];\n\t\t}\n\t}\n\n\t// overwrite settings from `this` with settings from arg\n\tif ( arg.tuna ) {\n\t\tfor ( let key in arg.tuna ) {\n\t\t\ttunaConfig[key] = arg.tuna[key];\n\t\t}\n\t}\n\tfor ( let key in tunaConfig) {\n\t\tlet tunaEffect = new tuna[key](tunaConfig[key]);\n\t\tthat.nodes.push(tunaEffect);\n\t}\n};\n///\n\nexport {\n\tlogStuff,\n\tlogMessage,\n\tcontext,\n\tnoiseBuffer,\n\tisArray,\n\tvalueOrDefault,\n\tconstructEnv,\n\tconstructFilter,\n\trequestAudioFile,\n\tconstructVibrato,\n\tconstructTremolo,\n\tconstructReverb,\n\tconstructPanning,\n\tconstructDelay,\n\tconstructCompressor,\n\tgetConsent,\n\tpermissionsGranted,\n\tsetUpMic,\n\tsetUpPanningOnPlay,\n\tsetUpVibratoOnPlay,\n\tsetUpTremoloOnPlay,\n\tsetUpDelayOnPlay,\n\tsetUpTunaOnPlay,\n\tplugEmIn,\n\tsetUpEnvOnPlay,\n\tsetUpFilterOnPlay,\n\tsetUpReverbOnPlay,\n\tfilterEnv,\n\tplayEnv,\n\tsetUpOscillator,\n\tcreateFilters,\n};\n","import SoundIterator from './sound_iterator';\nimport Polywad from './polywad';\nimport presets from './presets';\nimport {\n\tpitches,\n\tpitchesArray,\n} from './pitches';\nimport {\n\tmidiMap,\n\tassignMidiMap,\n\tmidiInputs,\n\tmidiInstrument,\n} from './midi';\nimport WebAudioDAW from './wad.js';\nimport { logStuff } from './common';\n\n\nlet Wad = WebAudioDAW;\nWad.Poly = Polywad;\nWad.SoundIterator = function(args){ return new SoundIterator(args, Wad); };\nWad.pitches = pitches;\nWad.pitchesArray = pitchesArray;\nWad.midiMap = midiMap;\nWad.assignMidiMap = assignMidiMap;\nWad.midiInstrument = midiInstrument;\nWad.midiInputs = midiInputs;\nWad.presets = presets;\nWad.logs = logStuff;\n\n\nif(typeof module !== 'undefined' && module.exports) { module.exports = Wad; }\n\nexport default Wad;\n\n","import {\n\tlogMessage,\n} from './common';\n\nimport { pitchesArray } from './pitches';\n\nlet assignMidiMap = function(midiMap, which, success, failure){\n\twhich = which || 0;\n\tnavigator.requestMIDIAccess().then(function(){\n\t\tif ( midiInputs[which] ) {\n\t\t\tmidiInputs[which].onmidimessage = midiMap;\n\t\t\tif  ( typeof success === 'function' ) { success(); }\n\t\t}\n\t\telse if ( typeof failure === 'function' ) { failure(); }\n\t});\n};\nlet midiInstrument = {\n\tplay : function() { logMessage('playing midi');  },\n\tstop : function() { logMessage('stopping midi'); }\n};\n\nlet midiInputs  = [];\n\nlet midiMap = function(event){\n\tlogMessage(event.receivedTime, event.data, 2);\n\tif ( event.data[0] === 144 ) { // 144 means the midi message has note data\n\t\tif ( event.data[2] === 0 ) { // noteOn velocity of 0 means this is actually a noteOff message\n\t\t\tlogMessage('Playing note: ', 2);\n\t\t\tlogMessage(pitchesArray[event.data[1]-12], 2);\n\t\t\tmidiInstrument.stop(pitchesArray[event.data[1]-12]);\n\t\t}\n\t\telse if ( event.data[2] > 0 ) {\n\t\t\tlogMessage('Stopping note: ', 2);\n\t\t\tlogMessage(pitchesArray[event.data[1]-12], 2);\n\t\t\tmidiInstrument.play({pitch : pitchesArray[event.data[1]-12], label : pitchesArray[event.data[1]-12] });\n\t\t}\n\t}\n\telse if ( event.data[0] === 176 ) { // 176 means the midi message has controller data\n\t\tlogMessage('controller');\n\t\tif ( event.data[1] == 46 ) {\n\t\t\tif ( event.data[2] == 127 ) { midiInstrument.pedalMod = true; }\n\t\t\telse if ( event.data[2] == 0 ) { midiInstrument.pedalMod = false; }\n\t\t}\n\t}\n\telse if ( event.data[0] === 224 ) { // 224 means the midi message has pitch bend data\n\t\tlogMessage('pitch bend');\n\t}\n};\n\n\nlet onSuccessCallback = function(midiAccess){\n\n\tmidiInputs = [];\n\tvar val = midiAccess.inputs.values();\n\tfor ( var o = val.next(); !o.done; o = val.next() ) {\n\t\tmidiInputs.push(o.value);\n\t}\n\t// Wad.midiInputs = [m.inputs.values().next().value];   // inputs = array of MIDIPorts\n\tlogMessage('MIDI inputs: ');\n\tlogMessage(midiInputs);\n\t// var outputs = m.outputs(); // outputs = array of MIDIPorts\n\tfor ( var i = 0; i < midiInputs.length; i++ ) {\n\t\tmidiInputs[i].onmidimessage = midiMap; // onmidimessage( event ), event.data & event.receivedTime are populated\n\t}\n\t// var o = m.outputs()[0];           // grab first output device\n\t// o.send( [ 0x90, 0x45, 0x7f ] );     // full velocity note on A4 on channel zero\n\t// o.send( [ 0x80, 0x45, 0x7f ], window.performance.now() + 1000 );  // full velocity A4 note off in one second.\n};\nlet onErrorCallback = function(err){\n\tlogMessage('Failed to get MIDI access', err);\n};\n\nif ( navigator && navigator.requestMIDIAccess ) {\n\ttry {\n\t\tnavigator.requestMIDIAccess().then(onSuccessCallback, onErrorCallback);\n\t}\n\tcatch(err) {\n\t\tlogMessage('Failed to get MIDI access', err);\n\t}\n}\n\nexport {\n\tmidiMap,\n\tassignMidiMap,\n\tmidiInstrument,\n\tmidiInputs,\n};\n\n","\n//////////////////////////////////////////////////////////////////////////////////////\n/** This object is a mapping of note names to frequencies. **/\n//////////////////////////////////////////////////////////////\nlet pitches = {\n\t'A0'  : 27.5000,\n\t'A#0' : 29.1352,\n\t'Bb0' : 29.1352,\n\t'B0'  : 30.8677,\n\t'B#0' : 32.7032,\n\t'Cb1' : 30.8677,\n\t'C1'  : 32.7032,\n\t'C#1' : 34.6478,\n\t'Db1' : 34.6478,\n\t'D1'  : 36.7081,\n\t'D#1' : 38.8909,\n\t'Eb1' : 38.8909,\n\t'E1'  : 41.2034,\n\t'Fb1' : 41.2034,\n\t'E#1' : 43.6535,\n\t'F1'  : 43.6535,\n\t'F#1' : 46.2493,\n\t'Gb1' : 46.2493,\n\t'G1'  : 48.9994,\n\t'G#1' : 51.9131,\n\t'Ab1' : 51.9131,\n\t'A1'  : 55.0000,\n\t'A#1' : 58.2705,\n\t'Bb1' : 58.2705,\n\t'B1'  : 61.7354,\n\t'Cb2' : 61.7354,\n\t'B#1' : 65.4064,\n\t'C2'  : 65.4064,\n\t'C#2' : 69.2957,\n\t'Db2' : 69.2957,\n\t'D2'  : 73.4162,\n\t'D#2' : 77.7817,\n\t'Eb2' : 77.7817,\n\t'E2'  : 82.4069,\n\t'Fb2' : 82.4069,\n\t'E#2' : 87.3071,\n\t'F2'  : 87.3071,\n\t'F#2' : 92.4986,\n\t'Gb2' : 92.4986,\n\t'G2'  : 97.9989,\n\t'G#2' : 103.826,\n\t'Ab2' : 103.826,\n\t'A2'  : 110.000,\n\t'A#2' : 116.541,\n\t'Bb2' : 116.541,\n\t'B2'  : 123.471,\n\t'Cb3' : 123.471,\n\t'B#2' : 130.813,\n\t'C3'  : 130.813,\n\t'C#3' : 138.591,\n\t'Db3' : 138.591,\n\t'D3'  : 146.832,\n\t'D#3' : 155.563,\n\t'Eb3' : 155.563,\n\t'E3'  : 164.814,\n\t'Fb3' : 164.814,\n\t'E#3' : 174.614,\n\t'F3'  : 174.614,\n\t'F#3' : 184.997,\n\t'Gb3' : 184.997,\n\t'G3'  : 195.998,\n\t'G#3' : 207.652,\n\t'Ab3' : 207.652,\n\t'A3'  : 220.000,\n\t'A#3' : 233.082,\n\t'Bb3' : 233.082,\n\t'B3'  : 246.942,\n\t'Cb4' : 246.942,\n\t'B#3' : 261.626,\n\t'C4'  : 261.626,\n\t'C#4' : 277.183,\n\t'Db4' : 277.183,\n\t'D4'  : 293.665,\n\t'D#4' : 311.127,\n\t'Eb4' : 311.127,\n\t'E4'  : 329.628,\n\t'Fb4' : 329.628,\n\t'E#4' : 349.228,\n\t'F4'  : 349.228,\n\t'F#4' : 369.994,\n\t'Gb4' : 369.994,\n\t'G4'  : 391.995,\n\t'G#4' : 415.305,\n\t'Ab4' : 415.305,\n\t'A4'  : 440.000,\n\t'A#4' : 466.164,\n\t'Bb4' : 466.164,\n\t'B4'  : 493.883,\n\t'Cb5' : 493.883,\n\t'B#4' : 523.251,\n\t'C5'  : 523.251,\n\t'C#5' : 554.365,\n\t'Db5' : 554.365,\n\t'D5'  : 587.330,\n\t'D#5' : 622.254,\n\t'Eb5' : 622.254,\n\t'E5'  : 659.255,\n\t'Fb5' : 659.255,\n\t'E#5' : 698.456,\n\t'F5'  : 698.456,\n\t'F#5' : 739.989,\n\t'Gb5' : 739.989,\n\t'G5'  : 783.991,\n\t'G#5' : 830.609,\n\t'Ab5' : 830.609,\n\t'A5'  : 880.000,\n\t'A#5' : 932.328,\n\t'Bb5' : 932.328,\n\t'B5'  : 987.767,\n\t'Cb6' : 987.767,\n\t'B#5' : 1046.50,\n\t'C6'  : 1046.50,\n\t'C#6' : 1108.73,\n\t'Db6' : 1108.73,\n\t'D6'  : 1174.66,\n\t'D#6' : 1244.51,\n\t'Eb6' : 1244.51,\n\t'Fb6' : 1318.51,\n\t'E6'  : 1318.51,\n\t'E#6' : 1396.91,\n\t'F6'  : 1396.91,\n\t'F#6' : 1479.98,\n\t'Gb6' : 1479.98,\n\t'G6'  : 1567.98,\n\t'G#6' : 1661.22,\n\t'Ab6' : 1661.22,\n\t'A6'  : 1760.00,\n\t'A#6' : 1864.66,\n\t'Bb6' : 1864.66,\n\t'B6'  : 1975.53,\n\t'Cb7' : 1975.53,\n\t'B#6' : 2093.00,\n\t'C7'  : 2093.00,\n\t'C#7' : 2217.46,\n\t'Db7' : 2217.46,\n\t'D7'  : 2349.32,\n\t'D#7' : 2489.02,\n\t'Eb7' : 2489.02,\n\t'E7'  : 2637.02,\n\t'Fb7' : 2637.02,\n\t'E#7' : 2793.83,\n\t'F7'  : 2793.83,\n\t'F#7' : 2959.96,\n\t'Gb7' : 2959.96,\n\t'G7'  : 3135.96,\n\t'G#7' : 3322.44,\n\t'Ab7' : 3322.44,\n\t'A7'  : 3520.00,\n\t'A#7' : 3729.31,\n\t'Bb7' : 3729.31,\n\t'B7'  : 3951.07,\n\t'Cb8' : 3951.07,\n\t'B#7' : 4186.01,\n\t'C8'  : 4186.01\n};\n\n\nlet pitchesArray = [ // Just an array of note names. This can be useful for mapping MIDI data to notes.\n\t'C0',\n\t'C#0',\n\t'D0',\n\t'D#0',\n\t'E0',\n\t'F0',\n\t'F#0',\n\t'G0',\n\t'G#0',\n\t'A0',\n\t'A#0',\n\t'B0',\n\t'C1',\n\t'C#1',\n\t'D1',\n\t'D#1',\n\t'E1',\n\t'F1',\n\t'F#1',\n\t'G1',\n\t'G#1',\n\t'A1',\n\t'A#1',\n\t'B1',\n\t'C2',\n\t'C#2',\n\t'D2',\n\t'D#2',\n\t'E2',\n\t'F2',\n\t'F#2',\n\t'G2',\n\t'G#2',\n\t'A2',\n\t'A#2',\n\t'B2',\n\t'C3',\n\t'C#3',\n\t'D3',\n\t'D#3',\n\t'E3',\n\t'F3',\n\t'F#3',\n\t'G3',\n\t'G#3',\n\t'A3',\n\t'A#3',\n\t'B3',\n\t'C4',\n\t'C#4',\n\t'D4',\n\t'D#4',\n\t'E4',\n\t'F4',\n\t'F#4',\n\t'G4',\n\t'G#4',\n\t'A4',\n\t'A#4',\n\t'B4',\n\t'C5',\n\t'C#5',\n\t'D5',\n\t'D#5',\n\t'E5',\n\t'F5',\n\t'F#5',\n\t'G5',\n\t'G#5',\n\t'A5',\n\t'A#5',\n\t'B5',\n\t'C6',\n\t'C#6',\n\t'D6',\n\t'D#6',\n\t'E6',\n\t'F6',\n\t'F#6',\n\t'G6',\n\t'G#6',\n\t'A6',\n\t'A#6',\n\t'B6',\n\t'C7',\n\t'C#7',\n\t'D7',\n\t'D#7',\n\t'E7',\n\t'F7',\n\t'F#7',\n\t'G7',\n\t'G#7',\n\t'A7',\n\t'A#7',\n\t'B7',\n\t'C8'\n];\n\nexport {\n\tpitches,\n\tpitchesArray,\n};\n","import {\n\tlogMessage,\n\tcontext,\n\tconstructFilter,\n\tconstructReverb,\n\tconstructPanning,\n\tconstructDelay,\n\tconstructCompressor,\n\tsetUpPanningOnPlay,\n\tsetUpDelayOnPlay,\n\tsetUpTunaOnPlay,\n\tplugEmIn,\n\tsetUpReverbOnPlay,\n\tcreateFilters,\n} from './common';\nimport {\n\tpitches,\n\tpitchesArray,\n} from './pitches';\n\n\nvar buflen = 2048;\nvar buf = new Uint8Array( buflen );\nvar MINVAL = 134;  // 128 == zero.  MINVAL is the \"minimum detected signal\" level.\n\nvar noteFromPitch = function( frequency ) {\n\tvar noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );\n\treturn Math.round( noteNum ) + 69;\n};\n\nvar frequencyFromNoteNumber = function( note ) {\n\treturn 440 * Math.pow(2,(note-69)/12);\n};\n\nvar centsOffFromPitch = function( frequency, note ) {\n\treturn Math.floor( 1200 * Math.log( frequency / frequencyFromNoteNumber( note ))/Math.log(2) );\n};\n\n\nfunction autoCorrelate( buf, sampleRate ) {\n\tvar MIN_SAMPLES = 4;    // corresponds to an 11kHz signal\n\tvar MAX_SAMPLES = 1000; // corresponds to a 44Hz signal\n\tvar SIZE = 1000;\n\tvar best_offset = -1;\n\tvar best_correlation = 0;\n\tvar rms = 0;\n\tvar foundGoodCorrelation = false;\n\n\tif (buf.length < (SIZE + MAX_SAMPLES - MIN_SAMPLES))\n\t\treturn -1;  // Not enough data\n\n\tfor ( let i = 0; i < SIZE; i++ ) {\n\t\tvar val = ( buf[i] - 128 ) / 128;\n\t\trms += val * val;\n\t}\n\trms = Math.sqrt(rms/SIZE);\n\tif (rms<0.01)\n\t\treturn -1;\n\n\tvar lastCorrelation=1;\n\tfor (var offset = MIN_SAMPLES; offset <= MAX_SAMPLES; offset++) {\n\t\tvar correlation = 0;\n\n\t\tfor (let i=0; i<SIZE; i++) {\n\t\t\tcorrelation += Math.abs(((buf[i] - 128)/128)-((buf[i+offset] - 128)/128));\n\t\t}\n\t\tcorrelation = 1 - (correlation/SIZE);\n\t\tif ((correlation>0.9) && (correlation > lastCorrelation))\n\t\t\tfoundGoodCorrelation = true;\n\t\telse if (foundGoodCorrelation) {\n\t\t\t// short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.\n\t\t\treturn sampleRate/best_offset;\n\t\t}\n\t\tlastCorrelation = correlation;\n\t\tif (correlation > best_correlation) {\n\t\t\tbest_correlation = correlation;\n\t\t\tbest_offset = offset;\n\t\t}\n\t}\n\tif (best_correlation > 0.01) {\n\t\t// logMessage(\"f = \" + sampleRate/best_offset + \"Hz (rms: \" + rms + \" confidence: \" + best_correlation + \")\")\n\t\treturn sampleRate/best_offset;\n\t}\n\treturn -1;\n\t//  var best_frequency = sampleRate/best_offset;\n}\n\nfunction volumeAudioProcess( event ) {\n\tvar buf = event.inputBuffer.getChannelData(0);\n\tvar bufLength = buf.length;\n\tvar sum = 0;\n\tvar x;\n    \n\t// Do a root-mean-square on the samples: sum up the squares...\n\tfor (var i=0; i<bufLength; i++) {\n\t\tx = buf[i];\n\t\tif (Math.abs(x)>=this.clipLevel) {\n\t\t\tthis.clipping = true;\n\t\t\tthis.lastClip = window.performance.now();\n\t\t}\n\t\tsum += x * x;\n\t}\n    \n\t// ... then take the square root of the sum.\n\tvar rms =  Math.sqrt(sum / bufLength);\n    \n\t// Now smooth this out with the averaging factor applied\n\t// to the previous sample - take the max here because we\n\t// want \"fast attack, slow release.\"\n\tthis.volume = Math.max(rms, this.volume*this.averaging);\n}\n\nfunction createAudioMeter(audioContext,clipLevel,averaging,clipLag) {\n\tvar processor = audioContext.createScriptProcessor(512);\n\tprocessor.onaudioprocess = volumeAudioProcess;\n\tprocessor.clipping = false;\n\tprocessor.lastClip = 0;\n\tprocessor.volume = 0;\n\tprocessor.clipLevel = clipLevel || 0.98;\n\tprocessor.averaging = averaging || 0.95;\n\tprocessor.clipLag = clipLag || 750;\n    \n\t// this will have no effect, since we don't copy the input to the output,\n\t// but works around a current Chrome bug.\n\tprocessor.connect(audioContext.destination);\n    \n\tprocessor.checkClipping = function(){\n\t\tif (!this.clipping){\n\t\t\treturn false;\n\t\t}\n\t\tif ((this.lastClip + this.clipLag) < window.performance.now()){\n\t\t\tthis.clipping = false;\n\t\t}\n\t\treturn this.clipping;\n\t};\n    \n\tprocessor.shutdown = function(){\n\t\tthis.disconnect();\n\t\tthis.onaudioprocess = null;\n\t};\n    \n\treturn processor;\n}\nconst Polywad = function(arg){\n\tif ( !arg ) { arg = {}; }\n\tthis.isSetUp  = false;\n\tthis.playable = 1;\n\n\tif ( arg.reverb ) {\n\t\tconstructReverb(this, arg); // We need to make sure we have downloaded the impulse response before continuing with the setup.\n\t}\n\telse {\n\t\tthis.setUp(arg);\n\t}\n};\n\nPolywad.prototype.setUp = function(arg){ // Anything that needs to happen before reverb is set up can go here.\n\tthis.wads              = [];\n\tthis.input             = context.createAnalyser();\n\tthis.input.fftSize     = 2048;\n\tthis.nodes             = [this.input];\n\tthis.destination       = arg.destination || context.destination; // the last node the sound is routed to\n\tthis.volume            = arg.volume || 1;\n\tthis.gain              = context.createGain();\n\tthis.gain.gain.value   = this.volume;\n\tthis.output            = context.createAnalyser();\n\tthis.tuna              = arg.tuna || null;\n\tthis.audioMeter        = null;\n\n\tif ( arg.audioMeter ) {\n\t\tthis.audioMeter = createAudioMeter(context, arg.audioMeter.clipLevel, arg.audioMeter.averaging, arg.audioMeter.clipLag);\n\t\tthis.output.connect(this.audioMeter);\n\t}\n\n\tconstructFilter(this, arg);\n\tif ( this.filter ) { createFilters(this, arg); }\n\n\tif ( this.reverb ) { setUpReverbOnPlay(this, arg); }\n\n\tthis.constructExternalFx(arg, context);\n\n\tconstructPanning(this, arg);\n\tsetUpPanningOnPlay(this, arg);\n\tif ( arg.compressor ) { constructCompressor(this, arg); }\n\n\tconstructDelay(this, arg);\n\tsetUpDelayOnPlay(this, arg);\n\tsetUpTunaOnPlay(this, arg);\n\tthis.nodes.push(this.gain);\n\tthis.nodes.push(this.output);\n\tplugEmIn(this, arg);\n\tthis.isSetUp = true;\n\tif ( arg.callback ) { arg.callback(this); }\n};\n\nPolywad.prototype.updatePitch = function( time ) {\n\tthis.input.getByteTimeDomainData( buf );\n\tvar ac = autoCorrelate( buf, context.sampleRate );\n\n\tif ( ac !== -1 && ac !== 11025 && ac !== 12000 ) {\n\t\tvar pitch = ac;\n\t\tthis.pitch = Math.floor( pitch ) ;\n\t\tvar note = noteFromPitch( pitch );\n\t\tthis.noteName = pitchesArray[note - 12];\n\t\t// Detune doesn't seem to work.\n\t\t// var detune = centsOffFromPitch( pitch, note );\n\t\t// if (detune == 0 ) {\n\t\t//     this.detuneEstimate = 0;\n\t\t// } else {\n\n\t\t//     this.detuneEstimate = detune\n\t\t// }\n\t}\n\tvar that = this;\n\tthat.rafID = window.requestAnimationFrame( function(){ that.updatePitch(); } );\n};\n\nPolywad.prototype.stopUpdatingPitch = function(){\n\tcancelAnimationFrame(this.rafID);\n};\n\n\nPolywad.prototype.setVolume = function(volume){\n\tif ( this.isSetUp ) {\n\t\tthis.gain.gain.value = volume;\n\t}\n\telse {\n\t\tlogMessage('This PolyWad is not set up yet.');\n\t}\n\treturn this;\n};\n\nPolywad.prototype.setPitch = function(pitch){\n\tthis.wads.forEach(function(wad){\n            \n\t\tif ( pitch in pitches ) {\n\t\t\tif ( wad.soundSource ) {\n\t\t\t\twad.soundSource.frequency.value = pitches[pitch];\n\t\t\t}\n\t\t\twad.pitch = pitches[pitch];\n\t\t}\n\t\telse {\n\t\t\tif ( wad.soundSource ) {\n\t\t\t\twad.soundSource.frequency.value = pitch;\n\t\t\t}\n\t\t\twad.pitch = pitch;\n\t\t}\n\t\treturn this;\n\t});\n};\n\nPolywad.prototype.play = function(arg){\n\tif ( this.isSetUp ) {\n\t\tif ( this.playable < 1 ) {\n\t\t\tthis.playOnLoad    = true;\n\t\t\tthis.playOnLoadArg = arg;\n\t\t}\n\t\telse {\n\t\t\tif ( arg && arg.volume ) {\n\t\t\t\tthis.gain.gain.value = arg.volume; // if two notes are played with volume set as a play arg, does the second one overwrite the first? maybe input should be an array of gain nodes, like regular wads.\n\t\t\t\targ.volume = undefined; // if volume is set, it should change the gain on the polywad's gain node, NOT the gain nodes for individual wads inside the polywad.\n\t\t\t}\n\t\t\tfor ( var i = 0; i < this.wads.length; i++ ) {\n\t\t\t\tthis.wads[i].play(arg);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tlogMessage('This PolyWad is not set up yet.');\n\t}\n\treturn this;\n};\n\nPolywad.prototype.stop = function(arg){\n\tif ( this.isSetUp ) {\n\t\tfor ( var i = 0; i < this.wads.length; i++ ) {\n\t\t\tthis.wads[i].stop(arg);\n\t\t}\n\t}\n};\n\nPolywad.prototype.add = function(wad){\n\tif ( this.isSetUp ) {\n\t\twad.destination = this.input;\n\t\tthis.wads.push(wad);\n\t\tif ( wad instanceof Polywad ) {\n\t\t\twad.output.disconnect(0);\n\t\t\twad.output.connect(this.input);\n\t\t}\n\t}\n\telse {\n\t\tlogMessage('This PolyWad is not set up yet.');\n\t}\n\treturn this;\n};\n\n\n\nPolywad.prototype.remove = function(wad){\n\tif ( this.isSetUp ) {\n\t\tfor ( var i = 0; i < this.wads.length; i++ ) {\n\t\t\tif ( this.wads[i] === wad ) {\n\t\t\t\tthis.wads[i].destination = context.destination;\n\t\t\t\tthis.wads.splice(i,1);\n\t\t\t\tif ( wad instanceof Polywad ) {\n\t\t\t\t\twad.output.disconnect(0);\n\t\t\t\t\twad.output.connect(context.destination);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn this;\n};\n\nPolywad.prototype.constructExternalFx = function(arg, context){\n\n};\n\nexport default Polywad;\n","let presets = {\n    hiHatClosed: {\n        source: 'noise',\n        env: {attack: .001, decay: .008, sustain: .2, hold: .03, release: .01},\n        filter: {type: 'highpass', frequency: 400, q: 1}\n    },\n    snare: {\n        source: 'noise',\n        env: {attack: .001, decay: .01, sustain: .2, hold: .03, release: .02},\n        filter: {type: 'bandpass', frequency: 300, q: .180}\n    },\n    hiHatOpen: {\n        source: 'noise',\n        env: {attack: .001, decay: .008, sustain: .2, hold: .43, release: .01},\n        filter: {type: 'highpass', frequency: 100, q: .2}\n    },\n    ghost: {\n        source: 'square',\n        volume: .3,\n        env: {attack: .01, decay: .002, sustain: .5, hold: 2.5, release: .3},\n        filter: {type: 'lowpass', frequency: 600, q: 7, env: {attack: .7, frequency: 1600}},\n        vibrato: {attack: 8, speed: 8, magnitude: 100}\n    },\n    piano: {\n        source: 'square',\n        volume: 1.4,\n        env: {attack: .01, decay: .005, sustain: .2, hold: .015, release: .3},\n        filter: {type: 'lowpass', frequency: 1200, q: 8.5, env: {attack: .2, frequency: 600}}\n    }\n};\n\nexport default presets;\n","/*below is the es6. It was transpiled to es5 from:\nhttps://babeljs.io/en/repl\nsearch for:\n// start of ES5\nto get there\n\nexport default class SoundIterator{\n    static defaultArgs = {\n        files: [], // either sound files or Wad audio objects\n        random: false, // either play a random order (true), or play in the order of the list (false)\n        randomPlaysBeforeRepeat: 0, // This value says the amount of plays that need to happen before a sound can be repeated. This only works if the length of the iterator is 3 or more, and this value is max 1 less than the length of the sound list.\n    }\n\n    constructor(args, Wad){\n        this.Wad = Wad //passed in from the Wad object that creates this iterator\n        args = Object.assign({}, SoundIterator.defaultArgs, args)\n        this.files = args.files\n        this.sounds = this.files.map(f=>f.play ? f : new Wad({source:f})) // checks if the item in the list is a wad or not.\n        this.randomSounds = this.sounds.slice() //creates a list of sounds that can be mutated if there are random sounds\n        this.random = args.random\n        this.randomPlaysBeforeRepeat = this.sounds.length > 3 && args.randomPlaysBeforeRepeat < this.sounds.length-1 ? args.randomPlaysBeforeRepeat : 0\n        this.index = 0 // keeps track of what item in the list is playing\n        this.waitingSounds = [] //has a list of the sounds that are waiting from randomPlaysBeforeRepeat\n    }\n\n    play(args={}){\n        if(!this.sounds.length) return 0\n        if(this.random){\n            const soundIndex = Math.floor(Math.random()*this.randomSounds.length)\n            const sound = this.randomSounds[soundIndex]\n            this.index = this.sounds.indexOf(sound)\n            this.waitingSounds = this.waitingSounds.filter(soundObj=>{\n                soundObj.plays -= 1\n                if(soundObj.plays < 1){\n                    this.randomSounds.push(soundObj.sound)\n                    return null\n                }\n                return true\n            })\n            if(this.randomPlaysBeforeRepeat){\n                this.randomSounds.splice(soundIndex, 1)\n                this.waitingSounds.push({plays: this.randomPlaysBeforeRepeat, sound: sound})\n            }\n            return sound.play(args)\n        } else {\n            const playingSound = this.sounds[this.index] ? this.sounds[this.index].play(args) : undefined\n            this.index += 1\n            if(this.index >= this.sounds.length){\n                this.index = 0\n            }\n            return playingSound    \n        }\n    }\n\n    add(sound){\n        if(!sound.play){\n            sound = new this.Wad({source: sound})\n        }\n        this.sounds.push(sound)\n        this.randomSounds.push(sound)\n        return this\n    }\n\n    remove(sound){\n        const soundIndex = this.sounds.indexOf(sound)\n        if(soundIndex === -1){\n            throw new Error(`That sound does not exist: ${sound}`)\n        }\n        this.sounds.splice(soundIndex, 1)\n        const randomSoundIndex = this.randomSounds.indexOf(sound)\n        if(randomSoundIndex === -1){\n            this.waitingSounds = this.waitingSounds.filter(obj => obj.sound === sound ? false : true)\n        } else {\n            this.randomSounds.splice(randomSoundIndex, 1)\n        }\n        return this\n    }\n}\n*/\n\n// start of ES5\n'use strict';\n\nfunction _instanceof(left, right) { if (right != null && typeof Symbol !== 'undefined' && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar SoundIterator =\n/*#__PURE__*/\nfunction () {\n\tfunction SoundIterator(args, Wad) {\n\t\t_classCallCheck(this, SoundIterator);\n\n\t\tthis.Wad = Wad; //passed in from the Wad object that creates this iterator\n\n\t\targs = Object.assign({}, SoundIterator.defaultArgs, args);\n\t\tthis.files = args.files;\n\t\tthis.sounds = this.files.map(function (f) {\n\t\t\treturn f.play ? f : new Wad({\n\t\t\t\tsource: f\n\t\t\t});\n\t\t}); // checks if the item in the list is a wad or not.\n\n\t\tthis.randomSounds = this.sounds.slice(); //creates a list of sounds that can be mutated if there are random sounds\n\n\t\tthis.random = args.random;\n\t\tthis.randomPlaysBeforeRepeat = this.sounds.length > 3 && args.randomPlaysBeforeRepeat < this.sounds.length - 1 ? args.randomPlaysBeforeRepeat : 0;\n\t\tthis.index = 0; // keeps track of what item in the list is playing\n\n\t\tthis.waitingSounds = []; //has a list of the sounds that are waiting from randomPlaysBeforeRepeat\n\t}\n\n\t_createClass(SoundIterator, [{\n\t\tkey: 'play',\n\t\tvalue: function play() {\n\t\t\tvar _this = this;\n\n\t\t\tvar args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t\t\tif (!this.sounds.length) return 0;\n\n\t\t\tif (this.random) {\n\t\t\t\tvar soundIndex = Math.floor(Math.random() * this.randomSounds.length);\n\t\t\t\tvar sound = this.randomSounds[soundIndex];\n\t\t\t\tthis.index = this.sounds.indexOf(sound);\n\t\t\t\tthis.waitingSounds = this.waitingSounds.filter(function (soundObj) {\n\t\t\t\t\tsoundObj.plays -= 1;\n\n\t\t\t\t\tif (soundObj.plays < 1) {\n\t\t\t\t\t\t_this.randomSounds.push(soundObj.sound);\n\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\n\t\t\t\tif (this.randomPlaysBeforeRepeat) {\n\t\t\t\t\tthis.randomSounds.splice(soundIndex, 1);\n\t\t\t\t\tthis.waitingSounds.push({\n\t\t\t\t\t\tplays: this.randomPlaysBeforeRepeat,\n\t\t\t\t\t\tsound: sound\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn sound.play(args);\n\t\t\t} else {\n\t\t\t\tvar playingSound = this.sounds[this.index] ? this.sounds[this.index].play(args) : undefined;\n\t\t\t\tthis.index += 1;\n\n\t\t\t\tif (this.index >= this.sounds.length) {\n\t\t\t\t\tthis.index = 0;\n\t\t\t\t}\n\n\t\t\t\treturn playingSound;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'add',\n\t\tvalue: function add(sound) {\n\t\t\tif (!sound.play) {\n\t\t\t\tsound = new this.Wad({\n\t\t\t\t\tsource: sound\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.sounds.push(sound);\n\t\t\tthis.randomSounds.push(sound);\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'remove',\n\t\tvalue: function remove(sound) {\n\t\t\tvar soundIndex = this.sounds.indexOf(sound);\n\n\t\t\tif (soundIndex === -1) {\n\t\t\t\tthrow new Error('That sound does not exist: '.concat(sound));\n\t\t\t}\n\n\t\t\tthis.sounds.splice(soundIndex, 1);\n\t\t\tvar randomSoundIndex = this.randomSounds.indexOf(sound);\n\n\t\t\tif (randomSoundIndex === -1) {\n\t\t\t\tthis.waitingSounds = this.waitingSounds.filter(function (obj) {\n\t\t\t\t\treturn obj.sound === sound ? false : true;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.randomSounds.splice(randomSoundIndex, 1);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t}]);\n\n\treturn SoundIterator;\n}();\n\n_defineProperty(SoundIterator, 'defaultArgs', {\n\tfiles: [],\n\t// either sound files or Wad audio objects\n\trandom: false,\n\t// either play a random order (true), or play in the order of the list (false)\n\trandomPlaysBeforeRepeat: 0 // This value says the amount of plays that need to happen before a sound can be repeated. This only works if the length of the iterator is 3 or more, and this value is max 1 less than the length of the sound list.\n\n});\nexport default SoundIterator;\n","import Tuna from 'tunajs';\nimport AudioListener from './audio_listener';\nimport {\n\tlogMessage,\n\tcontext,\n\tnoiseBuffer,\n\tisArray,\n\tvalueOrDefault,\n\tconstructEnv,\n\tconstructFilter,\n\trequestAudioFile,\n\tconstructVibrato,\n\tconstructTremolo,\n\tconstructReverb,\n\tconstructPanning,\n\tconstructDelay,\n\tgetConsent,\n\tpermissionsGranted,\n\tsetUpMic,\n\tsetUpPanningOnPlay,\n\tsetUpVibratoOnPlay,\n\tsetUpTremoloOnPlay,\n\tsetUpDelayOnPlay,\n\tsetUpTunaOnPlay,\n\tplugEmIn,\n\tsetUpEnvOnPlay,\n\tsetUpFilterOnPlay,\n\tsetUpReverbOnPlay,\n\tfilterEnv,\n\tplayEnv,\n\tsetUpOscillator,\n} from './common';\n\nlet Wad = function(arg){\n\t/** Set basic Wad properties **/\n\tthis.source        = arg.source;\n\tthis.destination   = arg.destination || context.destination; // the last node the sound is routed to\n\tthis.volume        = valueOrDefault(arg.volume, 1); // peak volume. min:0, max:1 (actually max is infinite, but ...just keep it at or below 1)\n\tthis.defaultVolume = this.volume;\n\tthis.playable      = 1; // if this is less than 1, this Wad is still waiting for a file to download before it can play\n\tthis.pitch         = Wad.pitches[arg.pitch] || arg.pitch || 440;\n\tthis.gain          = [];\n\tthis.detune        = arg.detune || 0; // In Cents.\n\tthis.offset        = arg.offset || 0;\n\tthis.loop          = arg.loop   || false;\n\tthis.tuna          = arg.tuna   || null;\n\tthis.rate          = arg.rate   || 1;\n\tthis.sprite        = arg.sprite || null;\n\tconstructEnv(this, arg);\n\tconstructFilter(this, arg);\n\tconstructVibrato(this, arg);\n\tconstructTremolo(this, arg);\n\tconstructReverb(this, arg);\n\tthis.constructExternalFx(arg, context);\n\tconstructPanning(this, arg);\n\tconstructDelay(this, arg);\n\tthis.duration = (this.env.attack + this.env.decay + this.env.hold + this.env.release) * (1/(this.rate)) * 1000;\n\t////////////////////////////////\n\n\n\t/** If the Wad's source is noise, set the Wad's buffer to the noise buffer we created earlier. **/\n\tif ( this.source === 'noise' ) {\n\t\tthis.decodedBuffer = noiseBuffer;\n\t}\n\t//////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\t/** If the Wad's source is the microphone, the rest of the setup happens here. **/\n\telse if ( this.source === 'mic' ) {\n\t\tgetConsent(this, arg);\n\t}\n\t//////////////////////////////////////////////////////////////////////////////////\n\n\n\t/** If the source is not a pre-defined value, assume it is a URL for an audio file, and grab it now. **/\n\telse if ( !( this.source in { 'sine' : 0, 'sawtooth' : 0, 'square' : 0, 'triangle' : 0 } ) ) {\n\t\trequestAudioFile(this, arg.callback);\n\n\t\tif ( this.sprite ) {\n\t\t\tvar thatWad = this;\n\t\t\tfor ( var sprite in this.sprite ) {\n\t\t\t\tthis[sprite] = {\n\t\t\t\t\tsprite: this.sprite[sprite],\n\t\t\t\t\tplay: function(arg){\n\t\t\t\t\t\targ = arg || {};\n\t\t\t\t\t\targ.env = arg.env || {};\n\t\t\t\t\t\targ.env.hold = this.sprite[1] - this.sprite[0];\n\t\t\t\t\t\targ.offset = this.sprite[0];\n\n\t\t\t\t\t\treturn thatWad.play(arg);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\t////////////////////////////////////////////////////////////////////////////////////////////////////////\n\telse { arg.callback && arg.callback(this); }\n\tWad.allWads.push(this);\n};\nWad.allWads = [];\nWad.audioContext = context;\nWad.listener = new AudioListener(context);\nif ( typeof Tuna != undefined ) {\n\tWad.tuna = new Tuna(Wad.audioContext);\n}\n\n/** Method to allow users to setup external fx in the constructor **/\nWad.prototype.constructExternalFx = function(arg, context){\n\t//override me in your own code\n};\n\n\n/** To be overrided by the user **/\nWad.prototype.setUpExternalFxOnPlay = function(arg, context){\n\t//user does what is necessary here, and then maybe does something like:\n\t// this.nodes.push(externalFX)\n};\n\n\n/** the play() method will create the various nodes that are required for this Wad to play,\nset properties on those nodes according to the constructor arguments and play() arguments,\nplug the nodes into each other with plugEmIn(),\nthen finally play the sound by calling playEnv() **/\nWad.prototype.play = function(arg){\n\targ = arg || { arg : null };\n\tif ( this.playable < 1 ) {\n\t\tthis.playOnLoad    = true;\n\t\tthis.playOnLoadArg = arg;\n\t}\n\n\telse if ( this.source === 'mic' ) {\n\t\tif ( permissionsGranted.micConsent ) {\n\t\t\tif ( arg.arg === null ) {\n\t\t\t\tplugEmIn(this, arg);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconstructFilter(this, arg);\n\t\t\t\tconstructVibrato(this, arg);\n\t\t\t\tconstructTremolo(this, arg);\n\t\t\t\tconstructReverb(this, arg);\n\t\t\t\tthis.constructExternalFx(arg, context);\n\t\t\t\tconstructPanning(this, arg);\n\t\t\t\tconstructDelay(this, arg);\n\t\t\t\tsetUpMic(this, arg);\n\t\t\t\tplugEmIn(this, arg);\n\t\t\t}\n\t\t}\n\t\telse { \n\t\t\tlogMessage('You have not given your browser permission to use your microphone.');\n\t\t\tgetConsent(this, arg).then(() =>{\n\t\t\t\tthis.play(arg);\n\t\t\t});\n\t\t}\n\t}\n\n\telse { // setup oscillators or audio clips\n\t\tthis.nodes = [];\n\t\tif ( !arg.wait ) { arg.wait = 0; }\n\t\tif ( arg.volume ) { this.volume = arg.volume; }\n\t\telse { this.volume = this.defaultVolume; }\n\t\targ.offset = arg.offset || this.offset || 0;\n\n\n\t\tif ( this.source in { 'sine' : 0, 'sawtooth' : 0, 'square' : 0, 'triangle' : 0 } ) {\n\t\t\tsetUpOscillator(this, arg);\n\t\t}\n\n\t\telse {\n\t\t\tthis.soundSource = context.createBufferSource();\n\t\t\tthis.soundSource.buffer = this.decodedBuffer;\n\t\t\tif ( this.source === 'noise' || this.loop || arg.loop ) {\n\t\t\t\tthis.soundSource.loop = true;\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t\tif ( this.soundSource.detune ) {\n\t\t\tthis.soundSource.detune.value = arg.detune || this.detune;\n\t\t}\n\n\t\tif ( arg.wait === undefined ) {\n\t\t\targ.wait = 0;\n\t\t}\n\t\tif (arg.exactTime === undefined) {\n\t\t\targ.exactTime = context.currentTime + arg.wait;\n\t\t}\n\t\tthis.lastPlayedTime = arg.exactTime - arg.offset;\n\n\t\tthis.nodes.push(this.soundSource);\n\n\n\t\t/**  sets the volume envelope based on the play() arguments if present,\nor defaults to the constructor arguments if the volume envelope is not set on play() **/\n\t\tsetUpEnvOnPlay(this, arg);\n\t\t////////////////////////////////////////////////////////////////////////////////////////\n\n\t\tif ( this.soundSource.playbackRate ) {\n\t\t\tthis.soundSource.playbackRate.value = arg.rate || this.rate;\n\t\t\tthis.env.hold = this.env.hold * (1/this.soundSource.playbackRate.value);\n\t\t}\n\n\t\t/**  sets up the filter and filter envelope based on the play() argument if present,\nor defaults to the constructor argument if the filter and filter envelope are not set on play() **/\n\t\tsetUpFilterOnPlay(this, arg);\n\t\t///////////////////////////////////////////////////////////////////////////////////////////////////\n\t\tsetUpTunaOnPlay(this, arg);\n\n\t\tthis.setUpExternalFxOnPlay(arg, context);\n\n\n\t\tthis.gain.unshift(context.createGain()); // sets up the gain node\n\t\tthis.gain[0].label = arg.label;\n\t\tthis.gain[0].soundSource = this.soundSource;\n\t\tthis.nodes.push(this.gain[0]);\n\n\t\tif ( this.gain.length > 15 ) {\n\t\t\tthis.gain.length = 15;\n\t\t}\n\n\t\t// sets up reverb\n\t\tif ( this.reverb ) { setUpReverbOnPlay(this, arg); }\n\n\t\t/**  sets panning based on the play() argument if present, or defaults to the constructor argument if panning is not set on play **/\n\t\tsetUpPanningOnPlay(this, arg);\n\t\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\t\tsetUpDelayOnPlay(this, arg);\n\n\t\tplugEmIn(this, arg);\n\n\t\tif ( this.filter && this.filter[0].env ) { filterEnv(this, arg); }\n\t\tplayEnv(this, arg);\n\n\t\t//sets up vibrato LFO\n\t\tif ( this.vibrato ) { setUpVibratoOnPlay(this, arg, Wad); }\n\n\t\t//sets up tremolo LFO\n\t\tif ( this.tremolo ) { setUpTremoloOnPlay(this, arg, Wad); }\n\n\t\tvar thatWad = this;\n\n\t\tthis.soundSource.onended = function(event){\n\t\t\tthatWad.playPromiseResolve(thatWad);\n\t\t};\n\n\t\tif ( !arg.unpause ) {\n\t\t\tthis.playPromise = new Promise(function(resolve, reject){\n\t\t\t\tthatWad.playPromiseResolve = resolve;\n\t\t\t});\n\t\t\treturn this.playPromise;\n\t\t}\n\t}\n\n\tif ( arg.callback ) { arg.callback(this); }\n\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////\n\n\n/** Change the volume of a wad at any time, including during playback **/\nWad.prototype.setVolume = function(volume, timeConstant, label){\n\ttimeConstant = timeConstant || .01;\n\tif ( label ) {\n\t\tif ( this.gain.length > 0 ) {\n\t\t\tfor ( let i = 0; i < this.gain.length; i++ ) {\n\t\t\t\tif ( this.gain[i].label === label ) {\n\t\t\t\t\tthis.gain[i].gain.setValueAtTime(volume, context.currentTime);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tthis.defaultVolume = volume;\n\t\tif ( this.gain.length > 0 ) { this.gain[0].gain.setValueAtTime(volume, context.currentTime); }\n\t}\n\treturn this;\n};\n\n/**\nChange the playback rate of a Wad during playback.\ninputSpeed is a value of 0 < speed, and is the rate of playback of the audio.\nE.g. if input speed = 2.0, the playback will be twice as fast\n**/\nWad.prototype.setRate = function(inputSpeed) {\n\n\t//Check/Save the input\n\tvar speed;\n\tif(inputSpeed && inputSpeed > 0) speed = inputSpeed;\n\telse speed = 0;\n\n\t//Check if we have a soundsource (Though we always should)\n\tif(this.soundSource) {\n\n\t\t//Set the value\n\t\tthis.soundSource.playbackRate.value = speed;\n\t}\n\telse {\n\n\t\t//Inform that there is no sound source on the current wad\n\t\tlogMessage('Sorry, but the wad does not contain a soundSource!');\n\t}\n\n\treturn this;\n};\n\nWad.prototype.setPitch = function(pitch, timeConstant, label){\n\ttimeConstant = timeConstant || .01;\n\tif ( label ) {\n\t\tfor ( let i = 0; i < this.gain.length; i++ ) {\n\t\t\tif ( this.gain[i].label === label ) {\n\t\t\t\tif ( pitch in Wad.pitches ) {\n\t\t\t\t\tthis.gain[i].soundSource.frequency.setTargetAtTime(Wad.pitches[pitch], context.currentTime, timeConstant);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.soundSource.frequency.settargetAtTime(pitch, context.currentTime, timeConstant);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tif ( pitch in Wad.pitches ) {\n\t\t\tif ( this.soundSource ) {\n\t\t\t\tthis.soundSource.frequency.value = Wad.pitches[pitch];\n\t\t\t}\n\t\t\tthis.pitch = Wad.pitches[pitch];\n\t\t}\n\t\telse {\n\t\t\tif ( this.soundSource ) {\n\t\t\t\tthis.soundSource.frequency.value = pitch;\n\t\t\t}\n\t\t\tthis.pitch = pitch;\n\t\t}\n\t}\n\treturn this;\n};\n\nWad.prototype.setDetune = function(detune, timeConstant, label){\n\ttimeConstant = timeConstant || .01;\n\tif ( label ) {\n\t\tfor ( let i = 0; i < this.gain.length; i++ ) {\n\t\t\tif ( this.gain[i].label === label ) {\n\t\t\t\tthis.gain[i].soundSource.detune.setTargetAtTime(detune, context.currentTime, timeConstant);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tthis.soundSource.detune.setTargetAtTime(detune, context.currentTime, timeConstant);\n\t}\n\treturn this;\n};\n\n/** Change the panning of a Wad at any time, including during playback **/\nWad.prototype.setPanning = function(panning, timeConstant, label){\n\ttimeConstant = timeConstant || .01;\n\tif ( typeof panning === 'number' && !context.createStereoPanner ) {\n\t\tpanning = [panning, 0, 0];\n\t}\n\n\tthis.panning.location = panning;\n\tif ( isArray(panning) && this.panning.type === '3d' && this.panning.node ) {\n\t\tthis.panning.node.setPosition(panning[0], panning[1], panning[2]);\n\n\t}\n\telse if ( typeof panning === 'number' && this.panning.type === 'stereo' && this.panning.node) {\n\t\tthis.panning.node.pan.setTargetAtTime(panning, context.currentTime, timeConstant);\n\t}\n\n\tif ( isArray(panning) ) { this.panning.type = '3d'; }\n\telse if ( typeof panning === 'number' ) { this.panning.type = 'stereo'; }\n\treturn this;\n};\n\n/**\nChange the Reverb of a Wad at any time, including during playback.\ninputWet is a value of 0 < wetness/gain < 1\n**/\nWad.prototype.setReverb = function(inputWet) {\n\n\t//Check/Save the input\n\n\tvar wet;\n\tif(inputWet && inputWet > 0 && inputWet < 1) wet = inputWet;\n\telse if(inputWet >= 1) wet = 1;\n\telse wet = 0;\n\n\t//Check if we have delay\n\tif(this.reverb) {\n\n\t\t//Set the value\n\t\tthis.reverb.wet = wet;\n\n\t\t//Set the node's value, if it exists\n\t\tif(this.reverb.node) {\n\n\t\t\tthis.reverb.node.wet.gain.value = wet;\n\t\t}\n\t}\n\telse {\n\n\t\t//Inform that there is no reverb on the current wad\n\t\tlogMessage('Sorry, but the wad does not contain Reverb!');\n\t}\n\n\treturn this;\n};\n\n\n/**\nChange the Delay of a Wad at any time, including during playback.\ninputTime is a value of time > 0, and is the time in seconds between each delayed playback.\ninputWet is a value of gain 0 < inputWet < 1, and is Relative volume change between the original sound and the first delayed playback.\ninputFeedback is a value of gain 0 < inputFeedback < 1, and is Relative volume change between each delayed playback and the next.\n**/\nWad.prototype.setDelay = function(inputTime, inputWet, inputFeedback){\n\n\t//Check/Save the input\n\tvar time;\n\tif(inputTime && inputTime > 0) time = inputTime;\n\telse time = 0;\n\n\tvar wet;\n\tif(inputWet && inputWet > 0 && inputWet < 1) wet = inputWet;\n\telse if(inputWet >= 1) wet = 1;\n\telse wet = 0;\n\n\tvar feedback;\n\tif(inputFeedback && inputFeedback > 0 && inputFeedback < 1) feedback = inputFeedback;\n\telse if(inputFeedback >= 1) feedback = 1;\n\telse feedback = 0;\n\n\t//Check if we have delay\n\tif(this.delay) {\n\n\t\t//Set the value\n\t\tthis.delay.delayTime = time;\n\t\tthis.delay.wet = wet;\n\t\tthis.delay.feedback = feedback;\n\n\t\t//Set the node's value, if it exists\n\t\tif(this.delay.delayNode) {\n\n\t\t\tthis.delay.delayNode.delayNode.delayTime.value = time;\n\t\t\tthis.delay.delayNode.wetNode.gain.value = wet;\n\t\t\tthis.delay.delayNode.feedbackNode.gain.value = feedback;\n\t\t}\n\t}\n\telse {\n\n\t\t//Inform that there is no delay on the current wad\n\t\tlogMessage('Sorry, but the wad does not contain delay!', 2);\n\t}\n\n\treturn this;\n};\n\n\nWad.prototype.pause = function(label){\n\tthis.pauseTime = context.currentTime;\n\tthis.soundSource.onended = null;\n\tthis.stop(label);\n\n};\nWad.prototype.unpause = function(arg){\n\targ = arg || {};\n\targ.unpause = true;\n\tif ( this.pauseTime && (this.lastPlayedTime != null) ) {\n\t\targ.offset = this.pauseTime - this.lastPlayedTime;\n\t}\n\telse { \n\t\tlogMessage('You tried to unpause a wad that was not played and paused, so it just played normally instead.', 2);\n\t}\n\tthis.play(arg);\n};\n\n/** If multiple instances of a sound are playing simultaneously, stop() only can stop the most recent one **/\nWad.prototype.stop = function(label){\n\tif ( !( this.source === 'mic' ) ) {\n\t\tif ( !(this.gain && this.gain.length) ){\n\t\t\tlogMessage('You tried to stop a Wad that never played. ', 2);\n\t\t\tlogMessage(this, 2);\n\t\t\treturn; // if the wad has never been played, there's no need to stop it\n\t\t}\n\t\telse if ( label ) {\n\t\t\tfor ( var i = 0; i < this.gain.length; i++ ) {\n\t\t\t\tif ( this.gain[i].label === label ) {\n\t\t\t\t\tthis.gain[i].gain.cancelScheduledValues(context.currentTime);\n\t\t\t\t\tthis.gain[i].gain.setValueAtTime(this.gain[i].gain.value, context.currentTime);\n\t\t\t\t\tthis.gain[i].gain.linearRampToValueAtTime(.0001, context.currentTime + this.env.release);\n\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if ( !label ) {\n\t\t\tthis.gain[0].gain.cancelScheduledValues(context.currentTime);\n\t\t\tthis.gain[0].gain.setValueAtTime(this.gain[0].gain.value, context.currentTime);\n\t\t\tthis.gain[0].gain.linearRampToValueAtTime(.0001, context.currentTime + this.env.release);\n\t\t\ttry {\n\t\t\t\tthis.soundSource.stop(context.currentTime + this.env.release);\n\t\t\t}\n\t\t\tcatch(e){\n\t\t\t\t/*\n\t\t\t\t\tSafari for iOS (and maybe other browsers)\n\t\t\t\t\tcan't seem to handle calling stop() on a soundSource that already had stop() scheduled.\n\t\t\t\t\tThe spec says it should be fine, and cancel previous calls to stop, \n\t\t\t\t\tbut Safari is throwing an error -- InvalidStateError: The object is in an invalid state.\n\t\t\t\t\tI'm not really sure why this is happening, but at least we can manually run the ended event handler.\n\t\t\t\t*/\n\t\t\t\tlogMessage(e,2);\n\t\t\t\tvar that = this;\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tthat.soundSource.dispatchEvent(new Event('ended'));\n\t\t\t\t\tthat.soundSource.onended = null;\n\t\t\t\t}, this.env.release * 1000);\n\t\t\t}\n\t\t}\n\t}\n\telse if (permissionsGranted.micConsent ) {\n\t\tthis.mediaStreamSource.disconnect(0);\n\t}\n\telse { logMessage('You have not given your browser permission to use your microphone.');}\n\tif ( this.tremolo ) {\n\t\tthis.tremolo.wad.stop();\n\t}\n};\n\nWad.stopAll = function(label){\n\tfor ( var i = 0; i < Wad.allWads.length; i++ ) {\n\t\tWad.allWads[i].stop(label);\n\t}\n};\nWad.setVolume = function(volume){\n\tfor ( var i = 0; i < Wad.allWads.length; i++ ) {\n\t\tWad.allWads[i].setVolume(volume);\n\t}\n};\n\nexport default Wad;\n"],"sourceRoot":""}